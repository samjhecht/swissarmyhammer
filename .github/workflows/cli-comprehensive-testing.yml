# CLI Comprehensive Testing Workflow
#
# This workflow runs the comprehensive test suite for CLI-MCP integration
# including behavioral consistency, performance benchmarks, and regression tests.

name: CLI Comprehensive Testing

on:
  push:
    paths:
      - 'swissarmyhammer-cli/**'
      - 'swissarmyhammer/src/mcp/**'
      - '.github/workflows/cli-comprehensive-testing.yml'
  pull_request:
    paths:
      - 'swissarmyhammer-cli/**'
      - 'swissarmyhammer/src/mcp/**'
      - '.github/workflows/cli-comprehensive-testing.yml'
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Basic test validation
  cli-unit-tests:
    name: CLI Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run CLI unit tests
      run: cargo test --package swissarmyhammer-cli --lib
      
  # Behavioral consistency tests
  behavioral-consistency:
    name: Behavioral Consistency Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: cli-unit-tests

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Build CLI binary
      run: cargo build --package swissarmyhammer-cli --release

    - name: Run behavioral consistency tests
      run: cargo test --package swissarmyhammer-cli behavioral_consistency
      env:
        RUST_LOG: debug

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: behavioral-test-artifacts
        path: |
          target/debug/test-*
          *.log

  # CLI-MCP integration tests
  cli-mcp-integration:
    name: CLI-MCP Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: cli-unit-tests

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Build CLI binary
      run: cargo build --package swissarmyhammer-cli --release

    - name: Run comprehensive CLI-MCP integration tests
      run: cargo test --package swissarmyhammer-cli comprehensive_cli_mcp_integration
      env:
        RUST_LOG: debug

    - name: Run existing CLI-MCP integration tests
      run: cargo test --package swissarmyhammer-cli cli_mcp_integration
      env:
        RUST_LOG: debug

  # Error scenario tests
  error-scenario-tests:
    name: Error Scenario Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: cli-unit-tests

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Build CLI binary
      run: cargo build --package swissarmyhammer-cli --release

    - name: Run error scenario tests
      run: cargo test --package swissarmyhammer-cli error_scenario
      env:
        RUST_LOG: debug

  # End-to-end workflow tests
  e2e-workflow-tests:
    name: End-to-End Workflow Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: cli-unit-tests

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Build CLI binary
      run: cargo build --package swissarmyhammer-cli --release

    - name: Run end-to-end workflow tests
      run: cargo test --package swissarmyhammer-cli e2e_workflow
      env:
        RUST_LOG: debug
        # Allow longer timeout for E2E tests
        RUST_TEST_TIME_UNIT: 60s
        RUST_TEST_TIME_INTEGRATION: 300s

  # Regression testing
  regression-tests:
    name: Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: cli-unit-tests

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Build CLI binary
      run: cargo build --package swissarmyhammer-cli --release

    - name: Run regression testing framework
      run: cargo test --package swissarmyhammer-cli regression_testing_framework
      env:
        RUST_LOG: debug

    - name: Generate regression report
      if: always()
      run: |
        mkdir -p regression-reports
        # The regression framework creates detailed reports
        find target -name "regression_*.md" -exec cp {} regression-reports/ \; || true

    - name: Upload regression reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: regression-reports
        path: regression-reports/

  # Performance benchmarks
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: cli-unit-tests
    # Only run benchmarks on main branch and scheduled runs to avoid noise
    if: github.ref == 'refs/heads/main' || github.event_name == 'schedule'

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-bench-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Build CLI binary in release mode
      run: cargo build --package swissarmyhammer-cli --release

    - name: Run performance benchmarks
      run: cargo bench --package swissarmyhammer-cli
      env:
        RUST_LOG: info

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          target/criterion/
          *.html

  # Cross-platform testing
  cross-platform-tests:
    name: Cross-Platform Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    needs: cli-unit-tests

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        # Git is pre-installed on macOS runners
        echo "Git already available"

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Git is pre-installed on Windows runners
        echo "Git already available"

    - name: Build CLI binary
      run: cargo build --package swissarmyhammer-cli --release

    - name: Run cross-platform behavioral tests
      run: cargo test --package swissarmyhammer-cli behavioral_consistency
      env:
        RUST_LOG: debug

    - name: Run cross-platform integration tests
      run: cargo test --package swissarmyhammer-cli cli_mcp_integration
      env:
        RUST_LOG: debug

  # Memory and resource usage tests
  resource-usage-tests:
    name: Resource Usage Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: cli-unit-tests

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies and monitoring tools
      run: |
        sudo apt-get update
        sudo apt-get install -y git valgrind time

    - name: Build CLI binary with debug info
      run: cargo build --package swissarmyhammer-cli --release

    - name: Run memory usage tests
      run: |
        # Test memory usage of basic commands
        /usr/bin/time -v target/release/swissarmyhammer --help
        /usr/bin/time -v target/release/swissarmyhammer --version
        
        # Create test environment
        mkdir -p test-env/issues
        cd test-env
        git init
        git config user.name "Test"
        git config user.email "test@example.com"
        
        # Test memory usage of CLI operations
        /usr/bin/time -v ../target/release/swissarmyhammer issue list
        /usr/bin/time -v ../target/release/swissarmyhammer memo list

    - name: Check for memory leaks (basic)
      run: |
        cd test-env
        # Run valgrind on simple commands to check for obvious leaks
        timeout 30s valgrind --tool=memcheck --leak-check=summary --error-exitcode=1 \
          ../target/release/swissarmyhammer --help || true

  # Security testing
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: cli-unit-tests

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Check for unsafe code
      run: |
        # Check for unsafe blocks in CLI code
        if grep -r "unsafe" swissarmyhammer-cli/src/; then
          echo "Found unsafe code in CLI - review required"
          exit 1
        fi

    - name: Build CLI binary
      run: cargo build --package swissarmyhammer-cli --release

    # Test path traversal and injection resistance
    - name: Security behavior tests
      run: |
        mkdir -p security-test
        cd security-test
        git init
        git config user.name "Test"
        git config user.email "test@example.com"
        
        # Test path traversal resistance
        timeout 10s ../target/release/swissarmyhammer issue create "../../../etc/passwd" --content "test" || true
        timeout 10s ../target/release/swissarmyhammer issue create "../../test" --content "test" || true
        
        # Test special character handling
        timeout 10s ../target/release/swissarmyhammer issue create 'test"issue' --content "test" || true
        timeout 10s ../target/release/swissarmyhammer issue create "test'issue" --content "test" || true

  # Test summary and reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [
      behavioral-consistency,
      cli-mcp-integration,
      error-scenario-tests,
      e2e-workflow-tests,
      regression-tests,
      cross-platform-tests,
      resource-usage-tests,
      security-tests
    ]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Generate test summary
      run: |
        echo "# CLI Comprehensive Testing Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "**Workflow:** ${{ github.workflow }}" >> test-summary.md
        echo "**Run:** ${{ github.run_number }}" >> test-summary.md
        echo "**Commit:** ${{ github.sha }}" >> test-summary.md
        echo "**Branch:** ${{ github.ref_name }}" >> test-summary.md
        echo "" >> test-summary.md
        
        echo "## Test Results" >> test-summary.md
        echo "- Behavioral Consistency: ${{ needs.behavioral-consistency.result }}" >> test-summary.md
        echo "- CLI-MCP Integration: ${{ needs.cli-mcp-integration.result }}" >> test-summary.md
        echo "- Error Scenarios: ${{ needs.error-scenario-tests.result }}" >> test-summary.md
        echo "- E2E Workflows: ${{ needs.e2e-workflow-tests.result }}" >> test-summary.md
        echo "- Regression Tests: ${{ needs.regression-tests.result }}" >> test-summary.md
        echo "- Cross-Platform: ${{ needs.cross-platform-tests.result }}" >> test-summary.md
        echo "- Resource Usage: ${{ needs.resource-usage-tests.result }}" >> test-summary.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
        
        echo "" >> test-summary.md
        echo "## Artifacts" >> test-summary.md
        echo "Available artifacts:" >> test-summary.md
        ls -la */ 2>/dev/null | grep "^d" | awk '{print "- " $9}' >> test-summary.md || echo "- No artifacts" >> test-summary.md

    - name: Upload test summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('test-summary.md')) {
            const summary = fs.readFileSync('test-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }