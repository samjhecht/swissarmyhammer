warning: unused import: `Color`
 --> swissarmyhammer-cli/src/ui/mod.rs:8:17
  |
8 | pub use theme::{Color, Theme, ThemeProvider};
  |                 ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: methods `theme`, `config`, `primary`, `secondary`, and `accent` are never used
  --> swissarmyhammer-cli/src/ui/mod.rs:40:12
   |
20 | impl UiContext {
   | -------------- methods in this implementation
...
40 |     pub fn theme(&self) -> &Theme {
   |            ^^^^^
...
44 |     pub fn config(&self) -> &UiConfig {
   |            ^^^^^^
...
52 |     pub fn primary(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^^
...
56 |     pub fn secondary(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^^^^
...
84 |     pub fn accent(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: methods `save` and `should_use_color` are never used
   --> swissarmyhammer-cli/src/ui/config.rs:59:12
    |
39  | impl UiConfig {
    | ------------- methods in this implementation
...
59  |     pub fn save(&self) -> Result<()> {
    |            ^^^^
...
101 |     pub fn should_use_color(&self) -> bool {
    |            ^^^^^^^^^^^^^^^^

warning: variants `Italic`, `Underline`, `Dimmed`, `Reversed`, and `Strikethrough` are never constructed
  --> swissarmyhammer-cli/src/ui/style.rs:9:5
   |
7  | pub enum TextDecoration {
   |          -------------- variants in this enum
8  |     Bold,
9  |     Italic,
   |     ^^^^^^
10 |     Underline,
   |     ^^^^^^^^^
11 |     Dimmed,
   |     ^^^^^^
12 |     Reversed,
   |     ^^^^^^^^
13 |     Strikethrough,
   |     ^^^^^^^^^^^^^
   |
   = note: `TextDecoration` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: methods `primary`, `secondary`, `link`, and `accent` are never used
  --> swissarmyhammer-cli/src/ui/style.rs:26:12
   |
21 | impl Style {
   | ---------- methods in this implementation
...
26 |     pub fn primary(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^^
...
30 |     pub fn secondary(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^^^^
...
58 |     pub fn link(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^
...
62 |     pub fn accent(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^

warning: multiple associated items are never used
   --> swissarmyhammer-cli/src/ui/style.rs:85:12
    |
75  | impl StyledText {
    | --------------- associated items in this implementation
...
85  |     pub fn plain(text: impl Into<String>) -> Self {
    |            ^^^^^
...
89  |     pub fn fg(mut self, color: Color) -> Self {
    |            ^^
...
94  |     pub fn bg(mut self, color: Color) -> Self {
    |            ^^
...
104 |     pub fn italic(mut self) -> Self {
    |            ^^^^^^
...
109 |     pub fn underline(mut self) -> Self {
    |            ^^^^^^^^^
...
114 |     pub fn dimmed(mut self) -> Self {
    |            ^^^^^^
...
119 |     pub fn reversed(mut self) -> Self {
    |            ^^^^^^^^
...
124 |     pub fn strikethrough(mut self) -> Self {
    |            ^^^^^^^^^^^^^

warning: function `adapt_colored_migration` is never used
   --> swissarmyhammer-cli/src/ui/style.rs:173:8
    |
173 | pub fn adapt_colored_migration(colored_string: &str) -> StyledText {
    |        ^^^^^^^^^^^^^^^^^^^^^^^

warning: methods `to_ansi_256`, `to_ansi_16`, and `to_hex` are never used
  --> swissarmyhammer-cli/src/ui/theme.rs:15:12
   |
10 | impl Color {
   | ---------- methods in this implementation
...
15 |     pub fn to_ansi_256(&self) -> u8 {
   |            ^^^^^^^^^^^
...
29 |     pub fn to_ansi_16(&self) -> u8 {
   |            ^^^^^^^^^^
...
83 |     pub fn to_hex(&self) -> String {
   |            ^^^^^^

warning: method `list_themes` is never used
   --> swissarmyhammer-cli/src/ui/theme.rs:169:8
    |
167 | pub trait ThemeProvider {
    |           ------------- method in this trait
168 |     fn get_theme(&self, name: &str) -> Option<Theme>;
169 |     fn list_themes(&self) -> Vec<String>;
    |        ^^^^^^^^^^^

warning: multiple variants are never constructed
  --> swissarmyhammer-cli/src/ui/utils.rs:9:5
   |
5  | pub enum Icon {
   |          ---- variants in this enum
...
9  |     Info,
   |     ^^^^
10 |     Arrow,
   |     ^^^^^
11 |     Bullet,
   |     ^^^^^^
12 |     Check,
   |     ^^^^^
13 |     Cross,
   |     ^^^^^
14 |     Question,
   |     ^^^^^^^^
15 |     Search,
   |     ^^^^^^
16 |     Folder,
   |     ^^^^^^
17 |     File,
   |     ^^^^
18 |     Lock,
   |     ^^^^
19 |     Unlock,
   |     ^^^^^^
20 |     Star,
   |     ^^^^
21 |     Heart,
   |     ^^^^^
22 |     Fire,
   |     ^^^^
23 |     Lightning,
   |     ^^^^^^^^^
24 |     Sparkles,
   |     ^^^^^^^^
25 |     Rocket,
   |     ^^^^^^
   |
   = note: `Icon` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: function `terminal_width` is never used
   --> swissarmyhammer-cli/src/ui/utils.rs:127:8
    |
127 | pub fn terminal_width() -> usize {
    |        ^^^^^^^^^^^^^^

warning: function `terminal_height` is never used
   --> swissarmyhammer-cli/src/ui/utils.rs:135:8
    |
135 | pub fn terminal_height() -> usize {
    |        ^^^^^^^^^^^^^^^

warning: function `truncate_with_ellipsis` is never used
   --> swissarmyhammer-cli/src/ui/utils.rs:143:8
    |
143 | pub fn truncate_with_ellipsis(text: &str, max_width: usize) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: function `center_text` is never used
   --> swissarmyhammer-cli/src/ui/utils.rs:153:8
    |
153 | pub fn center_text(text: &str, width: usize) -> String {
    |        ^^^^^^^^^^^

warning: function `wrap_text` is never used
   --> swissarmyhammer-cli/src/ui/utils.rs:168:8
    |
168 | pub fn wrap_text(text: &str, width: usize) -> Vec<String> {
    |        ^^^^^^^^^

warning: unused import: `Color`
 --> swissarmyhammer-cli/src/bin/../ui/mod.rs:8:17
  |
8 | pub use theme::{Color, Theme, ThemeProvider};
  |                 ^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: methods `theme`, `config`, `primary`, `secondary`, and `accent` are never used
  --> swissarmyhammer-cli/src/bin/../ui/mod.rs:40:12
   |
20 | impl UiContext {
   | -------------- methods in this implementation
...
40 |     pub fn theme(&self) -> &Theme {
   |            ^^^^^
...
44 |     pub fn config(&self) -> &UiConfig {
   |            ^^^^^^
...
52 |     pub fn primary(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^^
...
56 |     pub fn secondary(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^^^^
...
84 |     pub fn accent(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: methods `save` and `should_use_color` are never used
   --> swissarmyhammer-cli/src/bin/../ui/config.rs:59:12
    |
39  | impl UiConfig {
    | ------------- methods in this implementation
...
59  |     pub fn save(&self) -> Result<()> {
    |            ^^^^
...
101 |     pub fn should_use_color(&self) -> bool {
    |            ^^^^^^^^^^^^^^^^

warning: variants `Italic`, `Underline`, `Dimmed`, `Reversed`, and `Strikethrough` are never constructed
  --> swissarmyhammer-cli/src/bin/../ui/style.rs:9:5
   |
7  | pub enum TextDecoration {
   |          -------------- variants in this enum
8  |     Bold,
9  |     Italic,
   |     ^^^^^^
10 |     Underline,
   |     ^^^^^^^^^
11 |     Dimmed,
   |     ^^^^^^
12 |     Reversed,
   |     ^^^^^^^^
13 |     Strikethrough,
   |     ^^^^^^^^^^^^^
   |
   = note: `TextDecoration` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: methods `primary`, `secondary`, `link`, and `accent` are never used
  --> swissarmyhammer-cli/src/bin/../ui/style.rs:26:12
   |
21 | impl Style {
   | ---------- methods in this implementation
...
26 |     pub fn primary(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^^
...
30 |     pub fn secondary(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^^^^
...
58 |     pub fn link(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^
...
62 |     pub fn accent(&self, text: impl Into<String>) -> StyledText {
   |            ^^^^^^

warning: multiple associated items are never used
   --> swissarmyhammer-cli/src/bin/../ui/style.rs:85:12
    |
75  | impl StyledText {
    | --------------- associated items in this implementation
...
85  |     pub fn plain(text: impl Into<String>) -> Self {
    |            ^^^^^
...
89  |     pub fn fg(mut self, color: Color) -> Self {
    |            ^^
...
94  |     pub fn bg(mut self, color: Color) -> Self {
    |            ^^
...
104 |     pub fn italic(mut self) -> Self {
    |            ^^^^^^
...
109 |     pub fn underline(mut self) -> Self {
    |            ^^^^^^^^^
...
114 |     pub fn dimmed(mut self) -> Self {
    |            ^^^^^^
...
119 |     pub fn reversed(mut self) -> Self {
    |            ^^^^^^^^
...
124 |     pub fn strikethrough(mut self) -> Self {
    |            ^^^^^^^^^^^^^

warning: function `adapt_colored_migration` is never used
   --> swissarmyhammer-cli/src/bin/../ui/style.rs:173:8
    |
173 | pub fn adapt_colored_migration(colored_string: &str) -> StyledText {
    |        ^^^^^^^^^^^^^^^^^^^^^^^

warning: methods `to_ansi_256`, `to_ansi_16`, and `to_hex` are never used
  --> swissarmyhammer-cli/src/bin/../ui/theme.rs:15:12
   |
10 | impl Color {
   | ---------- methods in this implementation
...
15 |     pub fn to_ansi_256(&self) -> u8 {
   |            ^^^^^^^^^^^
...
29 |     pub fn to_ansi_16(&self) -> u8 {
   |            ^^^^^^^^^^
...
83 |     pub fn to_hex(&self) -> String {
   |            ^^^^^^

warning: method `list_themes` is never used
   --> swissarmyhammer-cli/src/bin/../ui/theme.rs:169:8
    |
167 | pub trait ThemeProvider {
    |           ------------- method in this trait
168 |     fn get_theme(&self, name: &str) -> Option<Theme>;
169 |     fn list_themes(&self) -> Vec<String>;
    |        ^^^^^^^^^^^

warning: multiple variants are never constructed
  --> swissarmyhammer-cli/src/bin/../ui/utils.rs:9:5
   |
5  | pub enum Icon {
   |          ---- variants in this enum
...
9  |     Info,
   |     ^^^^
10 |     Arrow,
   |     ^^^^^
11 |     Bullet,
   |     ^^^^^^
12 |     Check,
   |     ^^^^^
13 |     Cross,
   |     ^^^^^
14 |     Question,
   |     ^^^^^^^^
15 |     Search,
   |     ^^^^^^
16 |     Folder,
   |     ^^^^^^
17 |     File,
   |     ^^^^
18 |     Lock,
   |     ^^^^
19 |     Unlock,
   |     ^^^^^^
20 |     Star,
   |     ^^^^
21 |     Heart,
   |     ^^^^^
22 |     Fire,
   |     ^^^^
23 |     Lightning,
   |     ^^^^^^^^^
24 |     Sparkles,
   |     ^^^^^^^^
25 |     Rocket,
   |     ^^^^^^
   |
   = note: `Icon` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: function `terminal_width` is never used
   --> swissarmyhammer-cli/src/bin/../ui/utils.rs:127:8
    |
127 | pub fn terminal_width() -> usize {
    |        ^^^^^^^^^^^^^^

warning: function `terminal_height` is never used
   --> swissarmyhammer-cli/src/bin/../ui/utils.rs:135:8
    |
135 | pub fn terminal_height() -> usize {
    |        ^^^^^^^^^^^^^^^

warning: function `truncate_with_ellipsis` is never used
   --> swissarmyhammer-cli/src/bin/../ui/utils.rs:143:8
    |
143 | pub fn truncate_with_ellipsis(text: &str, max_width: usize) -> String {
    |        ^^^^^^^^^^^^^^^^^^^^^^

warning: function `center_text` is never used
   --> swissarmyhammer-cli/src/bin/../ui/utils.rs:153:8
    |
153 | pub fn center_text(text: &str, width: usize) -> String {
    |        ^^^^^^^^^^^

warning: function `wrap_text` is never used
   --> swissarmyhammer-cli/src/bin/../ui/utils.rs:168:8
    |
168 | pub fn wrap_text(text: &str, width: usize) -> Vec<String> {
    |        ^^^^^^^^^

warning: `swissarmyhammer-cli` (bin "swissarmyhammer") generated 15 warnings (run `cargo fix --bin "swissarmyhammer"` to apply 1 suggestion)
warning: `swissarmyhammer-cli` (bin "sah") generated 15 warnings (run `cargo fix --bin "sah"` to apply 1 suggestion)
   Compiling swissarmyhammer-cli v0.1.0 (/Users/sam/code/sandbox/swissarmyhammer-dev/swissarmyhammer-cli)
warning: `swissarmyhammer-cli` (bin "swissarmyhammer" test) generated 15 warnings (15 duplicates)
warning: `swissarmyhammer-cli` (bin "sah" test) generated 15 warnings (15 duplicates)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 2.73s
     Running unittests src/lib.rs (target/debug/deps/swissarmyhammer_cli-1a362ef0234da3f6)

running 76 tests
test cli::tests::test_cli_invalid_subcommand ... ok
test cli::tests::test_cli_serve_with_verbose ... ok
test cli::tests::test_cli_serve_subcommand ... ok
test cli::tests::test_cli_prompt_list_subcommand ... ok
test cli::tests::test_cli_no_subcommand ... ok
test cli::tests::test_cli_doctor_subcommand ... ok
test cli::tests::test_cli_quiet_flag ... ok
test cli::tests::test_cli_validate_command ... ok
test cli::tests::test_cli_flow_test_subcommand ... ok
test cli::tests::test_cli_test_subcommand_with_file ... ok
test cli::tests::test_cli_test_subcommand_with_prompt_name ... ok
test cli::tests::test_cli_test_subcommand_with_all_flags ... ok
test cli::tests::test_cli_help_works ... ok
test cli::tests::test_cli_search_subcommand_basic ... ok
test cli::tests::test_cli_test_subcommand_with_set_variables ... ok
test cli::tests::test_cli_test_subcommand_with_arguments ... ok
test cli::tests::test_cli_flow_test_subcommand_with_options ... ok
test cli::tests::test_cli_validate_command_with_options ... ok
test cli::tests::test_cli_search_subcommand_with_flags ... ok
test cli::tests::test_cli_search_subcommand_with_fields ... ok
test cli::tests::test_cli_verbose_flag ... ok
test cli::tests::test_cli_version_works ... ok
test cli::tests::test_combined_flags ... ok
test cli::tests::test_debug_flag ... ok
test cli::tests::test_memo_context ... ok
test cli::tests::test_issue_create_with_name ... ok
test cli::tests::test_memo_create_basic ... ok
test cli::tests::test_issue_create_with_file ... ok
test cli::tests::test_issue_create_named_with_file ... ok
test cli::tests::test_issue_create_without_name ... ok
test cli::tests::test_memo_create_with_content ... ok
test cli::tests::test_prompt_source_arg_conversions ... ok
test cli::tests::test_memo_delete ... ok
test cli::tests::test_prompt_source_arg_equality ... ok
test cli::tests::test_memo_list ... ok
test cli::tests::test_memo_get ... ok
test cli::tests::test_memo_update ... ok
test cli::tests::test_parse_args_panics_on_error ... ok
test cli::tests::test_memo_search ... ok
test cli::tests::test_search_index_single_pattern ... ok
test cli::tests::test_search_index_multiple_patterns ... ok
test cli::tests::test_search_index_with_force_flag ... ok
test cli::tests::test_search_query_command ... ok
test validate::tests::test_quiet_mode_hides_warnings_from_summary ... ok
test validate::tests::test_partial_template_no_variable_validation_errors ... ok
test mcp_integration::tests::test_response_formatting ... ok
test mcp_integration::tests::test_rate_limiter_creation ... ok
test mcp_integration::tests::test_create_arguments ... ok
test validate::tests::test_validate_command_includes_workflows ... ok
test validate::tests::test_validate_workflow_name_allowed_special_chars ... ok
test validate::tests::test_validate_workflow_security_handled_by_parsers ... ok
test validate::tests::test_validate_workflow_empty_file ... ok
test validate::tests::test_validate_workflow_empty_name ... ok
test validate::tests::test_validate_workflow_missing_terminal_state ... ok
test validate::tests::test_validate_workflow_syntax_invalid ... ok
test validate::tests::test_validation_result_add_error ... ok
test validate::tests::test_validation_result_add_warning ... ok
test validate::tests::test_validation_result_creation ... ok
test validate::tests::test_validator_creation ... ok
test validate::tests::test_validate_workflow_syntax_valid ... ok
test validate::tests::test_validate_workflow_complex_edge_cases ... ok
test validate::tests::test_validate_workflow_variable_detection_removed ... ok
test validate::tests::test_validate_workflow_circular_dependency_structurally_valid ... ok
test validate::tests::test_validate_workflow_self_loop ... ok
test validate::tests::test_validate_workflow_unreachable_states ... ok
test validate::tests::test_validate_workflow_nested_conditions ... ok
test validate::tests::test_validate_workflow_advanced_validation_removed ... ok
test validate::tests::test_validate_workflow_with_actions ... ok
test validate::tests::test_validate_workflow_malformed_mermaid ... ok
test mcp_integration::tests::test_cli_tool_context_creation ... ok
test mcp_integration::tests::test_rate_limiter_integration ... ok
test validate::tests::test_validate_all_workflows_uses_standard_locations ... ok
test validate::tests::test_validate_all_workflows_integration ... ok
test validate::tests::test_validate_only_loads_from_standard_locations ... ok
test validate::tests::test_validate_command_loads_same_workflows_as_flow_list ... ok
test validate::tests::test_validate_all_handles_partial_templates ... ok

test result: ok. 76 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 2.03s

     Running unittests src/bin/sah.rs (target/debug/deps/sah-46a799144030ebf3)

running 149 tests
test cli::tests::test_cli_invalid_subcommand ... ok
test cli::tests::test_cli_doctor_subcommand ... ok
test cli::tests::test_cli_serve_subcommand ... ok
test cli::tests::test_cli_no_subcommand ... ok
test cli::tests::test_cli_quiet_flag ... ok
test cli::tests::test_cli_serve_with_verbose ... ok
test cli::tests::test_cli_help_works ... ok
test cli::tests::test_cli_validate_command ... ok
test cli::tests::test_cli_flow_test_subcommand ... ok
test cli::tests::test_cli_prompt_list_subcommand ... ok
test cli::tests::test_cli_test_subcommand_with_all_flags ... ok
test cli::tests::test_cli_test_subcommand_with_prompt_name ... ok
test cli::tests::test_cli_test_subcommand_with_file ... ok
test cli::tests::test_cli_search_subcommand_basic ... ok
test cli::tests::test_cli_search_subcommand_with_flags ... ok
test cli::tests::test_cli_flow_test_subcommand_with_options ... ok
test cli::tests::test_cli_test_subcommand_with_arguments ... ok
test cli::tests::test_cli_test_subcommand_with_set_variables ... ok
test cli::tests::test_cli_validate_command_with_options ... ok
test cli::tests::test_cli_search_subcommand_with_fields ... ok
test cli::tests::test_cli_verbose_flag ... ok
test cli::tests::test_cli_version_works ... ok
test cli::tests::test_debug_flag ... ok
test cli::tests::test_combined_flags ... ok
test cli::tests::test_issue_create_with_file ... ok
test cli::tests::test_issue_create_without_name ... ok
test cli::tests::test_issue_create_named_with_file ... ok
test cli::tests::test_memo_create_basic ... ok
test cli::tests::test_issue_create_with_name ... ok
test cli::tests::test_memo_context ... ok
test cli::tests::test_memo_delete ... ok
test cli::tests::test_prompt_source_arg_conversions ... ok
test cli::tests::test_prompt_source_arg_equality ... ok
test cli::tests::test_memo_create_with_content ... ok
test cli::tests::test_memo_list ... ok
test cli::tests::test_memo_get ... ok
test cli::tests::test_memo_search ... ok
test cli::tests::test_memo_update ... ok
test cli::tests::test_parse_args_panics_on_error ... ok
test cli::tests::test_search_index_single_pattern ... ok
test cli::tests::test_search_index_multiple_patterns ... ok
test cli::tests::test_search_index_with_force_flag ... ok
test cli::tests::test_search_query_command ... ok
test doctor::tests::test_check_status_exit_codes ... ok
test doctor::tests::test_doctor_creation ... ok
test doctor::tests::test_exit_code_conversion ... ok
test doctor::types::tests::test_check_builder_minimal ... ok
test doctor::types::tests::test_check_builder_string_conversion ... ok
test doctor::types::tests::test_check_builder_with_fix ... ok
test doctor::types::tests::test_check_builder_with_message ... ok
test doctor::types::tests::test_check_status_equality ... ok
test doctor::types::tests::test_disk_space_display ... ok
_swissarmyhammer() {
    local i cur prev opts cmd
    COMPREPLY=()
    if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
        cur="$2"
    else
        cur="${COMP_WORDS[COMP_CWORD]}"
    fi
    prev="$3"
    cmd=""
    opts=""

    for i in "${COMP_WORDS[@]:0:COMP_CWORD}"
    do
        case "${cmd},${i}" in
            ",$1")
                cmd="swissarmyhammer"
                ;;
            swissarmyhammer,completion)
                cmd="swissarmyhammer__completion"
                ;;
            swissarmyhammer,doctor)
                cmd="swissarmyhammer__doctor"
                ;;
            swissarmyhammer,flow)
                cmd="swissarmyhammer__flow"
                ;;
            swissarmyhammer,help)
                cmd="swissarmyhammer__help"
                ;;
            swissarmyhammer,issue)
                cmd="swissarmyhammer__issue"
                ;;
            swissarmyhammer,memo)
                cmd="swissarmyhammer__memo"
                ;;
            swissarmyhammer,prompt)
                cmd="swissarmyhammer__prompt"
                ;;
            swissarmyhammer,search)
                cmd="swissarmyhammer__search"
                ;;
            swissarmyhammer,serve)
                cmd="swissarmyhammer__serve"
                ;;
            swissarmyhammer,validate)
                cmd="swissarmyhammer__validate"
                ;;
            swissarmyhammer__flow,help)
                cmd="swissarmyhammer__flow__help"
                ;;
            swissarmyhammer__flow,list)
                cmd="swissarmyhammer__flow__list"
                ;;
            swissarmyhammer__flow,logs)
                cmd="swissarmyhammer__flow__logs"
                ;;
            swissarmyhammer__flow,metrics)
                cmd="swissarmyhammer__flow__metrics"
                ;;
            swissarmyhammer__flow,resume)
                cmd="swissarmyhammer__flow__resume"
                ;;
            swissarmyhammer__flow,run)
                cmd="swissarmyhammer__flow__run"
                ;;
            swissarmyhammer__flow,status)
                cmd="swissarmyhammer__flow__status"
                ;;
            swissarmyhammer__flow,test)
                cmd="swissarmyhammer__flow__test"
                ;;
            swissarmyhammer__flow,visualize)
                cmd="swissarmyhammer__flow__visualize"
                ;;
            swissarmyhammer__flow__help,help)
                cmd="swissarmyhammer__flow__help__help"
                ;;
            swissarmyhammer__flow__help,list)
                cmd="swissarmyhammer__flow__help__list"
                ;;
            swissarmyhammer__flow__help,logs)
                cmd="swissarmyhammer__flow__help__logs"
                ;;
            swissarmyhammer__flow__help,metrics)
                cmd="swissarmyhammer__flow__help__metrics"
                ;;
            swissarmyhammer__flow__help,resume)
                cmd="swissarmyhammer__flow__help__resume"
                ;;
            swissarmyhammer__flow__help,run)
                cmd="swissarmyhammer__flow__help__run"
                ;;
            swissarmyhammer__flow__help,status)
                cmd="swissarmyhammer__flow__help__status"
                ;;
            swissarmyhammer__flow__help,test)
                cmd="swissarmyhammer__flow__help__test"
                ;;
            swissarmyhammer__flow__help,visualize)
                cmd="swissarmyhammer__flow__help__visualize"
                ;;
            swissarmyhammer__help,completion)
                cmd="swissarmyhammer__help__completion"
                ;;
            swissarmyhammer__help,doctor)
                cmd="swissarmyhammer__help__doctor"
                ;;
            swissarmyhammer__help,flow)
                cmd="swissarmyhammer__help__flow"
                ;;
            swissarmyhammer__help,help)
                cmd="swissarmyhammer__help__help"
                ;;
            swissarmyhammer__help,issue)
                cmd="swissarmyhammer__help__issue"
                ;;
            swissarmyhammer__help,memo)
                cmd="swissarmyhammer__help__memo"
                ;;
            swissarmyhammer__help,prompt)
                cmd="swissarmyhammer__help__prompt"
                ;;
            swissarmyhammer__help,search)
                cmd="swissarmyhammer__help__search"
                ;;
            swissarmyhammer__help,serve)
                cmd="swissarmyhammer__help__serve"
                ;;
            swissarmyhammer__help,validate)
                cmd="swissarmyhammer__help__validate"
                ;;
            swissarmyhammer__help__flow,list)
                cmd="swissarmyhammer__help__flow__list"
                ;;
            swissarmyhammer__help__flow,logs)
                cmd="swissarmyhammer__help__flow__logs"
                ;;
            swissarmyhammer__help__flow,metrics)
                cmd="swissarmyhammer__help__flow__metrics"
                ;;
            swissarmyhammer__help__flow,resume)
                cmd="swissarmyhammer__help__flow__resume"
                ;;
            swissarmyhammer__help__flow,run)
                cmd="swissarmyhammer__help__flow__run"
                ;;
            swissarmyhammer__help__flow,status)
                cmd="swissarmyhammer__help__flow__status"
                ;;
            swissarmyhammer__help__flow,test)
                cmd="swissarmyhammer__help__flow__test"
                ;;
            swissarmyhammer__help__flow,visualize)
                cmd="swissarmyhammer__help__flow__visualize"
                ;;
            swissarmyhammer__help__issue,complete)
                cmd="swissarmyhammer__help__issue__complete"
                ;;
            swissarmyhammer__help__issue,create)
                cmd="swissarmyhammer__help__issue__create"
                ;;
            swissarmyhammer__help__issue,current)
                cmd="swissarmyhammer__help__issue__current"
                ;;
            swissarmyhammer__help__issue,list)
                cmd="swissarmyhammer__help__issue__list"
                ;;
            swissarmyhammer__help__issue,merge)
                cmd="swissarmyhammer__help__issue__merge"
                ;;
            swissarmyhammer__help__issue,next)
                cmd="swissarmyhammer__help__issue__next"
                ;;
            swissarmyhammer__help__issue,show)
                cmd="swissarmyhammer__help__issue__show"
                ;;
            swissarmyhammer__help__issue,status)
                cmd="swissarmyhammer__help__issue__status"
                ;;
            swissarmyhammer__help__issue,update)
                cmd="swissarmyhammer__help__issue__update"
                ;;
            swissarmyhammer__help__issue,work)
                cmd="swissarmyhammer__help__issue__work"
                ;;
            swissarmyhammer__help__memo,context)
                cmd="swissarmyhammer__help__memo__context"
                ;;
            swissarmyhammer__help__memo,create)
                cmd="swissarmyhammer__help__memo__create"
                ;;
            swissarmyhammer__help__memo,delete)
                cmd="swissarmyhammer__help__memo__delete"
                ;;
            swissarmyhammer__help__memo,get)
                cmd="swissarmyhammer__help__memo__get"
                ;;
            swissarmyhammer__help__memo,list)
                cmd="swissarmyhammer__help__memo__list"
                ;;
            swissarmyhammer__help__memo,search)
                cmd="swissarmyhammer__help__memo__search"
                ;;
            swissarmyhammer__help__memo,update)
                cmd="swissarmyhammer__help__memo__update"
                ;;
            swissarmyhammer__help__prompt,list)
                cmd="swissarmyhammer__help__prompt__list"
                ;;
            swissarmyhammer__help__prompt,search)
                cmd="swissarmyhammer__help__prompt__search"
                ;;
            swissarmyhammer__help__prompt,test)
                cmd="swissarmyhammer__help__prompt__test"
                ;;
            swissarmyhammer__help__search,index)
                cmd="swissarmyhammer__help__search__index"
                ;;
            swissarmyhammer__help__search,query)
                cmd="swissarmyhammer__help__search__query"
                ;;
            swissarmyhammer__issue,complete)
                cmd="swissarmyhammer__issue__complete"
                ;;
            swissarmyhammer__issue,create)
                cmd="swissarmyhammer__issue__create"
                ;;
            swissarmyhammer__issue,current)
                cmd="swissarmyhammer__issue__current"
                ;;
            swissarmyhammer__issue,help)
                cmd="swissarmyhammer__issue__help"
                ;;
            swissarmyhammer__issue,list)
                cmd="swissarmyhammer__issue__list"
                ;;
            swissarmyhammer__issue,merge)
                cmd="swissarmyhammer__issue__merge"
                ;;
            swissarmyhammer__issue,next)
                cmd="swissarmyhammer__issue__next"
                ;;
            swissarmyhammer__issue,show)
                cmd="swissarmyhammer__issue__show"
                ;;
            swissarmyhammer__issue,status)
                cmd="swissarmyhammer__issue__status"
                ;;
            swissarmyhammer__issue,update)
                cmd="swissarmyhammer__issue__update"
                ;;
            swissarmyhammer__issue,work)
                cmd="swissarmyhammer__issue__work"
                ;;
            swissarmyhammer__issue__help,complete)
                cmd="swissarmyhammer__issue__help__complete"
                ;;
            swissarmyhammer__issue__help,create)
                cmd="swissarmyhammer__issue__help__create"
                ;;
            swissarmyhammer__issue__help,current)
                cmd="swissarmyhammer__issue__help__current"
                ;;
            swissarmyhammer__issue__help,help)
                cmd="swissarmyhammer__issue__help__help"
                ;;
            swissarmyhammer__issue__help,list)
                cmd="swissarmyhammer__issue__help__list"
                ;;
            swissarmyhammer__issue__help,merge)
                cmd="swissarmyhammer__issue__help__merge"
                ;;
            swissarmyhammer__issue__help,next)
                cmd="swissarmyhammer__issue__help__next"
                ;;
            swissarmyhammer__issue__help,show)
                cmd="swissarmyhammer__issue__help__show"
                ;;
            swissarmyhammer__issue__help,status)
                cmd="swissarmyhammer__issue__help__status"
                ;;
            swissarmyhammer__issue__help,update)
                cmd="swissarmyhammer__issue__help__update"
                ;;
            swissarmyhammer__issue__help,work)
                cmd="swissarmyhammer__issue__help__work"
                ;;
            swissarmyhammer__memo,context)
                cmd="swissarmyhammer__memo__context"
                ;;
            swissarmyhammer__memo,create)
                cmd="swissarmyhammer__memo__create"
                ;;
            swissarmyhammer__memo,delete)
                cmd="swissarmyhammer__memo__delete"
                ;;
            swissarmyhammer__memo,get)
                cmd="swissarmyhammer__memo__get"
                ;;
            swissarmyhammer__memo,help)
                cmd="swissarmyhammer__memo__help"
                ;;
            swissarmyhammer__memo,list)
                cmd="swissarmyhammer__memo__list"
                ;;
            swissarmyhammer__memo,search)
                cmd="swissarmyhammer__memo__search"
                ;;
            swissarmyhammer__memo,update)
                cmd="swissarmyhammer__memo__update"
                ;;
            swissarmyhammer__memo__help,context)
                cmd="swissarmyhammer__memo__help__context"
                ;;
            swissarmyhammer__memo__help,create)
                cmd="swissarmyhammer__memo__help__create"
                ;;
            swissarmyhammer__memo__help,delete)
                cmd="swissarmyhammer__memo__help__delete"
                ;;
            swissarmyhammer__memo__help,get)
                cmd="swissarmyhammer__memo__help__get"
                ;;
            swissarmyhammer__memo__help,help)
                cmd="swissarmyhammer__memo__help__help"
                ;;
            swissarmyhammer__memo__help,list)
                cmd="swissarmyhammer__memo__help__list"
                ;;
            swissarmyhammer__memo__help,search)
                cmd="swissarmyhammer__memo__help__search"
                ;;
            swissarmyhammer__memo__help,update)
                cmd="swissarmyhammer__memo__help__update"
                ;;
            swissarmyhammer__prompt,help)
                cmd="swissarmyhammer__prompt__help"
                ;;
            swissarmyhammer__prompt,list)
                cmd="swissarmyhammer__prompt__list"
                ;;
            swissarmyhammer__prompt,search)
                cmd="swissarmyhammer__prompt__search"
                ;;
            swissarmyhammer__prompt,test)
                cmd="swissarmyhammer__prompt__test"
                ;;
            swissarmyhammer__prompt__help,help)
                cmd="swissarmyhammer__prompt__help__help"
                ;;
            swissarmyhammer__prompt__help,list)
                cmd="swissarmyhammer__prompt__help__list"
                ;;
            swissarmyhammer__prompt__help,search)
                cmd="swissarmyhammer__prompt__help__search"
                ;;
            swissarmyhammer__prompt__help,test)
                cmd="swissarmyhammer__prompt__help__test"
                ;;
            swissarmyhammer__search,help)
                cmd="swissarmyhammer__search__help"
                ;;
            swissarmyhammer__search,index)
                cmd="swissarmyhammer__search__index"
                ;;
            swissarmyhammer__search,query)
                cmd="swissarmyhammer__search__query"
                ;;
            swissarmyhammer__search__help,help)
                cmd="swissarmyhammer__search__help__help"
                ;;
            swissarmyhammer__search__help,index)
                cmd="swissarmyhammer__search__help__index"
                ;;
            swissarmyhammer__search__help,query)
                cmd="swissarmyhammer__search__help__query"
                ;;
            *)
                ;;
        esac
    done

    case "${cmd}" in
        swissarmyhammer)
            opts="-v -d -q -h -V --verbose --debug --quiet --help --version serve doctor prompt flow completion validate issue memo search help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__completion)
            opts="-h --help bash elvish fish powershell zsh"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__doctor)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow)
            opts="-h --help run resume list status logs metrics visualize test help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help)
            opts="run resume list status logs metrics visualize test help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__logs)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__metrics)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__resume)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__run)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__status)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__test)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__visualize)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__list)
            opts="-v -h --format --verbose --source --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                --source)
                    COMPREPLY=($(compgen -W "builtin user local dynamic" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__logs)
            opts="-f -n -h --follow --tail --level --help <RUN_ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --tail)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -n)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --level)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__metrics)
            opts="-g -h --workflow --format --global --help [RUN_ID]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --workflow)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__resume)
            opts="-i -q -h --interactive --timeout --quiet --help <RUN_ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --timeout)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__run)
            opts="-i -q -h --var --set --interactive --dry-run --test --timeout --quiet --help <WORKFLOW>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --var)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --set)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --timeout)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__status)
            opts="-w -h --format --watch --help <RUN_ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__test)
            opts="-i -q -h --var --set --interactive --timeout --quiet --help <WORKFLOW>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --var)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --set)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --timeout)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__visualize)
            opts="-o -h --format --output --timing --counts --path-only --help <RUN_ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "mermaid html json dot" -- "${cur}"))
                    return 0
                    ;;
                --output)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -o)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help)
            opts="serve doctor prompt flow completion validate issue memo search help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__completion)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__doctor)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow)
            opts="run resume list status logs metrics visualize test"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__logs)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__metrics)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__resume)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__run)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__status)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__test)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__visualize)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue)
            opts="create list show update complete work merge current status next"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__complete)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__create)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__current)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__merge)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__next)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__show)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__status)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__update)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__work)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo)
            opts="create list get update delete search context"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__context)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__create)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__delete)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__get)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__search)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__update)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__prompt)
            opts="list test search"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__prompt__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__prompt__search)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__prompt__test)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__search)
            opts="index query"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__search__index)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__search__query)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__serve)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__validate)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue)
            opts="-h --help create list show update complete work merge current status next help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__complete)
            opts="-h --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__create)
            opts="-c -f -h --content --file --help [NAME]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --content)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --file)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__current)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help)
            opts="create list show update complete work merge current status next help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__complete)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__create)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__current)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__merge)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__next)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__show)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__status)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__update)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__work)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__list)
            opts="-c -a -f -h --completed --active --format --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__merge)
            opts="-k -h --keep-branch --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__next)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__show)
            opts="-r -h --raw --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__status)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__update)
            opts="-c -f -a -h --content --file --append --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --content)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --file)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__work)
            opts="-h --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo)
            opts="-h --help create list get update delete search context help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__context)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__create)
            opts="-c -h --content --help <TITLE>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --content)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__delete)
            opts="-h --help <ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__get)
            opts="-h --help <ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help)
            opts="create list get update delete search context help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__context)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__create)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__delete)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__get)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__search)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__update)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__list)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__search)
            opts="-h --help <QUERY>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__update)
            opts="-c -h --content --help <ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --content)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt)
            opts="-h --help list test search help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help)
            opts="list test search help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help__search)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help__test)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__list)
            opts="-v -h --format --verbose --source --category --search --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                --source)
                    COMPREPLY=($(compgen -W "builtin user local dynamic" -- "${cur}"))
                    return 0
                    ;;
                --category)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --search)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__search)
            opts="-r -f -l -h --in --regex --fuzzy --case-sensitive --source --has-arg --no-args --full --format --highlight --limit --help <QUERY>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --in)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --source)
                    COMPREPLY=($(compgen -W "builtin user local dynamic" -- "${cur}"))
                    return 0
                    ;;
                --has-arg)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                --limit)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -l)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__test)
            opts="-f -h --file --arg --set --raw --copy --save --debug --help [PROMPT_NAME]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --file)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --arg)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --set)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --save)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search)
            opts="-h --help index query help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__help)
            opts="index query help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__help__index)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__help__query)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__index)
            opts="-f -h --force --help [PATTERNS]..."
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__query)
            opts="-l -f -h --limit --format --help <QUERY>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --limit)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -l)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__serve)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__validate)
            opts="-q -h --quiet --format --workflow-dir --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "text json" -- "${cur}"))
                    return 0
                    ;;
                --workflow-dir)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
    esac
}

if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then
    complete -F _swissarmyhammer -o nosort -o bashdefault -o default swissarmyhammer
else
    complete -F _swissarmyhammer -o bashdefault -o default swissarmyhammer
fi
test doctor::types::tests::test_disk_space_from_mb ... ok
test doctor::types::tests::test_disk_space_is_low ... ok
test doctor::types::tests::test_disk_space_ordering ... ok
test doctor::checks::tests::test_claude_not_in_path ... ok
test doctor::types::tests::test_exit_code_conversion ... ok
test doctor::types::tests::test_exit_code_equality ... ok
test doctor::types::tests::test_workflow_category_display ... ok
test doctor::types::tests::test_workflow_category_equality ... ok
test doctor::types::tests::test_workflow_directory_as_ref ... ok
test doctor::types::tests::test_workflow_directory_display ... ok
test doctor::types::tests::test_workflow_directory_info_new ... ok
test doctor::types::tests::test_workflow_directory_equality ... ok
test completions::tests::test_print_completion_bash ... ok
test completions::tests::test_completion_includes_flags ... ok
test doctor::types::tests::test_workflow_directory_new ... ok
test completions::tests::test_completion_includes_subcommands ... ok
test completions::tests::test_print_completion_fish ... ok
test flow::tests::test_parse_duration ... ok
test completions::tests::test_print_completion_zsh ... ok
test list::tests::test_color_coding_when_terminal ... ok
test flow::tests::test_workflow_run_id_parse_error ... ok
#compdef swissarmyhammer

autoload -U is-at-least

_swissarmyhammer() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-v[Enable verbose logging]' \
'--verbose[Enable verbose logging]' \
'-d[Enable debug logging]' \
'--debug[Enable debug logging]' \
'-q[Suppress all output except errors]' \
'--quiet[Suppress all output except errors]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_swissarmyhammer_commands" \
"*::: :->swissarmyhammer" \
&& ret=0
    case $state in
    (swissarmyhammer)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-command-$line[1]:"
        case $line[1] in
            (serve)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(doctor)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(prompt)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__prompt_commands" \
"*::: :->prompt" \
&& ret=0

    case $state in
    (prompt)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-prompt-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(table json yaml)' \
'--source=[Filter by source]:SOURCE:(builtin user local dynamic)' \
'--category=[Filter by category]:CATEGORY:_default' \
'--search=[Search prompts by name or description]:SEARCH:_default' \
'-v[Show verbose output including arguments]' \
'--verbose[Show verbose output including arguments]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
'-f+[Path to prompt file to test]:FILE:_default' \
'--file=[Path to prompt file to test]:FILE:_default' \
'*--arg=[Non-interactive mode\: specify arguments as key=value pairs]:KEY=VALUE:_default' \
'*--set=[Set template variables for liquid rendering as key=value pairs]:KEY=VALUE:_default' \
'--save=[Save rendered prompt to file]:FILE:_default' \
'--raw[Show raw output without formatting]' \
'--copy[Copy rendered prompt to clipboard]' \
'--debug[Show debug information (template, args, processing steps)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::prompt_name -- Prompt name to test (alternative to --file):_default' \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
'*--in=[Search in specific fields (name, title, description, content, arguments)]:IN:_default' \
'--source=[Filter by source]:SOURCE:(builtin user local dynamic)' \
'--has-arg=[Find prompts with specific argument name]:HAS_ARG:_default' \
'--format=[Output format]:FORMAT:(table json yaml)' \
'-l+[Maximum number of results to show]:LIMIT:_default' \
'--limit=[Maximum number of results to show]:LIMIT:_default' \
'-r[Use regular expressions]' \
'--regex[Use regular expressions]' \
'-f[Enable fuzzy matching for typo tolerance]' \
'--fuzzy[Enable fuzzy matching for typo tolerance]' \
'--case-sensitive[Case-sensitive search]' \
'--no-args[Find prompts without any arguments]' \
'--full[Show complete prompt details]' \
'--highlight[Highlight matching terms in output]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':query -- Search query:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__prompt__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-prompt-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(flow)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__flow_commands" \
"*::: :->flow" \
&& ret=0

    case $state in
    (flow)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-flow-command-$line[1]:"
        case $line[1] in
            (run)
_arguments "${_arguments_options[@]}" : \
'*--var=[Initial variables as key=value pairs]:KEY=VALUE:_default' \
'*--set=[Set template variables for liquid rendering in action strings as key=value pairs]:KEY=VALUE:_default' \
'--timeout=[Execution timeout (e.g., 30s, 5m, 1h)]:TIMEOUT:_default' \
'-i[Interactive mode - prompt at each state]' \
'--interactive[Interactive mode - prompt at each state]' \
'--dry-run[Dry run - show execution plan without running]' \
'--test[Test mode - execute with mocked actions and generate coverage report]' \
'-q[Quiet mode - only show errors]' \
'--quiet[Quiet mode - only show errors]' \
'-h[Print help]' \
'--help[Print help]' \
':workflow -- Workflow name to run:_default' \
&& ret=0
;;
(resume)
_arguments "${_arguments_options[@]}" : \
'--timeout=[Execution timeout (e.g., 30s, 5m, 1h)]:TIMEOUT:_default' \
'-i[Interactive mode - prompt at each state]' \
'--interactive[Interactive mode - prompt at each state]' \
'-q[Quiet mode - only show errors]' \
'--quiet[Quiet mode - only show errors]' \
'-h[Print help]' \
'--help[Print help]' \
':run_id -- Run ID to resume:_default' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(table json yaml)' \
'--source=[Filter by source]:SOURCE:(builtin user local dynamic)' \
'-v[Show verbose output including workflow details]' \
'--verbose[Show verbose output including workflow details]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(table json yaml)' \
'-w[Watch for status changes]' \
'--watch[Watch for status changes]' \
'-h[Print help]' \
'--help[Print help]' \
':run_id -- Run ID to check:_default' \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
'-n+[Number of log lines to show (from end)]:TAIL:_default' \
'--tail=[Number of log lines to show (from end)]:TAIL:_default' \
'--level=[Filter logs by level (info, warn, error)]:LEVEL:_default' \
'-f[Follow log output (like tail -f)]' \
'--follow[Follow log output (like tail -f)]' \
'-h[Print help]' \
'--help[Print help]' \
':run_id -- Run ID to view logs for:_default' \
&& ret=0
;;
(metrics)
_arguments "${_arguments_options[@]}" : \
'--workflow=[Workflow name to filter by]:WORKFLOW:_default' \
'--format=[Output format]:FORMAT:(table json yaml)' \
'-g[Show global metrics summary]' \
'--global[Show global metrics summary]' \
'-h[Print help]' \
'--help[Print help]' \
'::run_id -- Run ID to view metrics for (optional - shows all if not specified):_default' \
&& ret=0
;;
(visualize)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(mermaid html json dot)' \
'-o+[Output file path (optional - prints to stdout if not specified)]:OUTPUT:_default' \
'--output=[Output file path (optional - prints to stdout if not specified)]:OUTPUT:_default' \
'--timing[Include timing information]' \
'--counts[Include execution counts]' \
'--path-only[Show only executed path]' \
'-h[Print help]' \
'--help[Print help]' \
':run_id -- Run ID to visualize:_default' \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
'*--var=[Initial variables as key=value pairs]:KEY=VALUE:_default' \
'*--set=[Set template variables for liquid rendering in action strings as key=value pairs]:KEY=VALUE:_default' \
'--timeout=[Execution timeout (e.g., 30s, 5m, 1h)]:TIMEOUT:_default' \
'-i[Interactive mode - prompt at each state]' \
'--interactive[Interactive mode - prompt at each state]' \
'-q[Quiet mode - only show errors]' \
'--quiet[Quiet mode - only show errors]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':workflow -- Workflow name to test:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__flow__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-flow-help-command-$line[1]:"
        case $line[1] in
            (run)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(resume)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(metrics)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(visualize)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(completion)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':shell -- Shell to generate completion for:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(validate)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(text json)' \
'*--workflow-dir=[\\\[DEPRECATED\\\] This parameter is ignored. Workflows are now only loaded from standard locations]:DIR:_default' \
'-q[Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary]' \
'--quiet[Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(issue)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__issue_commands" \
"*::: :->issue" \
&& ret=0

    case $state in
    (issue)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-issue-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
'-c+[Issue content (use - for stdin)]:CONTENT:_default' \
'--content=[Issue content (use - for stdin)]:CONTENT:_default' \
'-f+[Read content from file]:FILE:_files' \
'--file=[Read content from file]:FILE:_files' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- Issue name (optional):_default' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'-f+[Output format (table, json, markdown)]:FORMAT:_default' \
'--format=[Output format (table, json, markdown)]:FORMAT:_default' \
'-c[Show completed issues]' \
'--completed[Show completed issues]' \
'-a[Show active issues only]' \
'--active[Show active issues only]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
'-r[Show raw content]' \
'--raw[Show raw content]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
'-c+[New content (use - for stdin)]:CONTENT:_default' \
'--content=[New content (use - for stdin)]:CONTENT:_default' \
'-f+[Read content from file]:FILE:_files' \
'--file=[Read content from file]:FILE:_files' \
'-a[Append to existing content]' \
'--append[Append to existing content]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(complete)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(work)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(merge)
_arguments "${_arguments_options[@]}" : \
'-k[Keep branch after merge]' \
'--keep-branch[Keep branch after merge]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(current)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(next)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__issue__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-issue-help-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(complete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(work)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(merge)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(current)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(next)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(memo)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__memo_commands" \
"*::: :->memo" \
&& ret=0

    case $state in
    (memo)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-memo-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
'-c+[Memo content (use - for stdin)]:CONTENT:_default' \
'--content=[Memo content (use - for stdin)]:CONTENT:_default' \
'-h[Print help]' \
'--help[Print help]' \
':title -- Memo title:_default' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':id -- Memo ID (ULID):_default' \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
'-c+[New content (use - for stdin)]:CONTENT:_default' \
'--content=[New content (use - for stdin)]:CONTENT:_default' \
'-h[Print help]' \
'--help[Print help]' \
':id -- Memo ID (ULID):_default' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':id -- Memo ID (ULID):_default' \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':query -- Search query:_default' \
&& ret=0
;;
(context)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__memo__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-memo-help-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(context)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(search)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__search_commands" \
"*::: :->search" \
&& ret=0

    case $state in
    (search)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-search-command-$line[1]:"
        case $line[1] in
            (index)
_arguments "${_arguments_options[@]}" : \
'-f[Force re-indexing of all files]' \
'--force[Force re-indexing of all files]' \
'-h[Print help]' \
'--help[Print help]' \
'*::patterns -- Glob patterns or files to index (supports both "**/*.rs" and expanded file lists):_default' \
&& ret=0
;;
(query)
_arguments "${_arguments_options[@]}" : \
'-l+[Number of results to return]:LIMIT:_default' \
'--limit=[Number of results to return]:LIMIT:_default' \
'-f+[Output format]:FORMAT:(table json yaml)' \
'--format=[Output format]:FORMAT:(table json yaml)' \
'-h[Print help]' \
'--help[Print help]' \
':query -- Search query:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__search__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-search-help-command-$line[1]:"
        case $line[1] in
            (index)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(query)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-command-$line[1]:"
        case $line[1] in
            (serve)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(doctor)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(prompt)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__prompt_commands" \
"*::: :->prompt" \
&& ret=0

    case $state in
    (prompt)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-prompt-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(flow)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__flow_commands" \
"*::: :->flow" \
&& ret=0

    case $state in
    (flow)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-flow-command-$line[1]:"
        case $line[1] in
            (run)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(resume)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(metrics)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(visualize)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(completion)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(validate)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(issue)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__issue_commands" \
"*::: :->issue" \
&& ret=0

    case $state in
    (issue)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-issue-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(complete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(work)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(merge)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(current)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(next)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(memo)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__memo_commands" \
"*::: :->memo" \
&& ret=0

    case $state in
    (memo)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-memo-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(context)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(search)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__search_commands" \
"*::: :->search" \
&& ret=0

    case $state in
    (search)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-search-command-$line[1]:"
        case $line[1] in
            (index)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(query)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_swissarmyhammer_commands] )) ||
_swissarmyhammer_commands() {
    local commands; commands=(
'serve:Run as MCP server (default when invoked via stdio)' \
'doctor:Diagnose configuration and setup issues' \
'prompt:Manage and test prompts' \
'flow:Execute and manage workflows' \
'completion:Generate shell completion scripts' \
'validate:Validate prompt files and workflows for syntax and best practices' \
'issue:Issue management commands' \
'memo:Memoranda (memo) management commands' \
'search:Semantic search commands' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer commands' commands "$@"
}
(( $+functions[_swissarmyhammer__completion_commands] )) ||
_swissarmyhammer__completion_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer completion commands' commands "$@"
}
(( $+functions[_swissarmyhammer__doctor_commands] )) ||
_swissarmyhammer__doctor_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer doctor commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow_commands] )) ||
_swissarmyhammer__flow_commands() {
    local commands; commands=(
'run:Run a workflow' \
'resume:Resume a paused workflow run' \
'list:List available workflows' \
'status:Check status of a workflow run' \
'logs:View logs for a workflow run' \
'metrics:View metrics for workflow runs' \
'visualize:Generate execution visualization' \
'test:Test a workflow without executing actions (simulates dry run)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer flow commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help_commands] )) ||
_swissarmyhammer__flow__help_commands() {
    local commands; commands=(
'run:Run a workflow' \
'resume:Resume a paused workflow run' \
'list:List available workflows' \
'status:Check status of a workflow run' \
'logs:View logs for a workflow run' \
'metrics:View metrics for workflow runs' \
'visualize:Generate execution visualization' \
'test:Test a workflow without executing actions (simulates dry run)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer flow help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__help_commands] )) ||
_swissarmyhammer__flow__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__list_commands] )) ||
_swissarmyhammer__flow__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__logs_commands] )) ||
_swissarmyhammer__flow__help__logs_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help logs commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__metrics_commands] )) ||
_swissarmyhammer__flow__help__metrics_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help metrics commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__resume_commands] )) ||
_swissarmyhammer__flow__help__resume_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help resume commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__run_commands] )) ||
_swissarmyhammer__flow__help__run_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help run commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__status_commands] )) ||
_swissarmyhammer__flow__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__test_commands] )) ||
_swissarmyhammer__flow__help__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__visualize_commands] )) ||
_swissarmyhammer__flow__help__visualize_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help visualize commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__list_commands] )) ||
_swissarmyhammer__flow__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__logs_commands] )) ||
_swissarmyhammer__flow__logs_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow logs commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__metrics_commands] )) ||
_swissarmyhammer__flow__metrics_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow metrics commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__resume_commands] )) ||
_swissarmyhammer__flow__resume_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow resume commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__run_commands] )) ||
_swissarmyhammer__flow__run_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow run commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__status_commands] )) ||
_swissarmyhammer__flow__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__test_commands] )) ||
_swissarmyhammer__flow__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__visualize_commands] )) ||
_swissarmyhammer__flow__visualize_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow visualize commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help_commands] )) ||
_swissarmyhammer__help_commands() {
    local commands; commands=(
'serve:Run as MCP server (default when invoked via stdio)' \
'doctor:Diagnose configuration and setup issues' \
'prompt:Manage and test prompts' \
'flow:Execute and manage workflows' \
'completion:Generate shell completion scripts' \
'validate:Validate prompt files and workflows for syntax and best practices' \
'issue:Issue management commands' \
'memo:Memoranda (memo) management commands' \
'search:Semantic search commands' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__completion_commands] )) ||
_swissarmyhammer__help__completion_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help completion commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__doctor_commands] )) ||
_swissarmyhammer__help__doctor_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help doctor commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow_commands] )) ||
_swissarmyhammer__help__flow_commands() {
    local commands; commands=(
'run:Run a workflow' \
'resume:Resume a paused workflow run' \
'list:List available workflows' \
'status:Check status of a workflow run' \
'logs:View logs for a workflow run' \
'metrics:View metrics for workflow runs' \
'visualize:Generate execution visualization' \
'test:Test a workflow without executing actions (simulates dry run)' \
    )
    _describe -t commands 'swissarmyhammer help flow commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__list_commands] )) ||
_swissarmyhammer__help__flow__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__logs_commands] )) ||
_swissarmyhammer__help__flow__logs_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow logs commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__metrics_commands] )) ||
_swissarmyhammer__help__flow__metrics_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow metrics commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__resume_commands] )) ||
_swissarmyhammer__help__flow__resume_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow resume commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__run_commands] )) ||
_swissarmyhammer__help__flow__run_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow run commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__status_commands] )) ||
_swissarmyhammer__help__flow__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__test_commands] )) ||
_swissarmyhammer__help__flow__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__visualize_commands] )) ||
_swissarmyhammer__help__flow__visualize_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow visualize commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__help_commands] )) ||
_swissarmyhammer__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue_commands] )) ||
_swissarmyhammer__help__issue_commands() {
    local commands; commands=(
'create:Create a new issue' \
'list:List all issues' \
'show:Show issue details' \
'update:Update an issue' \
'complete:Mark issue as complete' \
'work:Start working on an issue' \
'merge:Merge completed issue' \
'current:Show current issue' \
'status:Show project status' \
'next:Show the next issue to work on' \
    )
    _describe -t commands 'swissarmyhammer help issue commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__complete_commands] )) ||
_swissarmyhammer__help__issue__complete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue complete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__create_commands] )) ||
_swissarmyhammer__help__issue__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__current_commands] )) ||
_swissarmyhammer__help__issue__current_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue current commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__list_commands] )) ||
_swissarmyhammer__help__issue__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__merge_commands] )) ||
_swissarmyhammer__help__issue__merge_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue merge commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__next_commands] )) ||
_swissarmyhammer__help__issue__next_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue next commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__show_commands] )) ||
_swissarmyhammer__help__issue__show_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue show commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__status_commands] )) ||
_swissarmyhammer__help__issue__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__update_commands] )) ||
_swissarmyhammer__help__issue__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__work_commands] )) ||
_swissarmyhammer__help__issue__work_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue work commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo_commands] )) ||
_swissarmyhammer__help__memo_commands() {
    local commands; commands=(
'create:Create a new memo' \
'list:List all memos' \
'get:Get a specific memo by ID' \
'update:Update a memo'\''s content' \
'delete:Delete a memo' \
'search:Search memos by content and title' \
'context:Get all memos as context for AI' \
    )
    _describe -t commands 'swissarmyhammer help memo commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__context_commands] )) ||
_swissarmyhammer__help__memo__context_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo context commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__create_commands] )) ||
_swissarmyhammer__help__memo__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__delete_commands] )) ||
_swissarmyhammer__help__memo__delete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo delete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__get_commands] )) ||
_swissarmyhammer__help__memo__get_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo get commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__list_commands] )) ||
_swissarmyhammer__help__memo__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__search_commands] )) ||
_swissarmyhammer__help__memo__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__update_commands] )) ||
_swissarmyhammer__help__memo__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__prompt_commands] )) ||
_swissarmyhammer__help__prompt_commands() {
    local commands; commands=(
'list:List all available prompts' \
'test:Test prompts interactively with sample arguments' \
'search:Search for prompts with advanced filtering and ranking' \
    )
    _describe -t commands 'swissarmyhammer help prompt commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__prompt__list_commands] )) ||
_swissarmyhammer__help__prompt__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help prompt list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__prompt__search_commands] )) ||
_swissarmyhammer__help__prompt__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help prompt search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__prompt__test_commands] )) ||
_swissarmyhammer__help__prompt__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help prompt test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__search_commands] )) ||
_swissarmyhammer__help__search_commands() {
    local commands; commands=(
'index:Index files for semantic search' \
'query:Query indexed files semantically' \
    )
    _describe -t commands 'swissarmyhammer help search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__search__index_commands] )) ||
_swissarmyhammer__help__search__index_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help search index commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__search__query_commands] )) ||
_swissarmyhammer__help__search__query_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help search query commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__serve_commands] )) ||
_swissarmyhammer__help__serve_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help serve commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__validate_commands] )) ||
_swissarmyhammer__help__validate_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help validate commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue_commands] )) ||
_swissarmyhammer__issue_commands() {
    local commands; commands=(
'create:Create a new issue' \
'list:List all issues' \
'show:Show issue details' \
'update:Update an issue' \
'complete:Mark issue as complete' \
'work:Start working on an issue' \
'merge:Merge completed issue' \
'current:Show current issue' \
'status:Show project status' \
'next:Show the next issue to work on' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer issue commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__complete_commands] )) ||
_swissarmyhammer__issue__complete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue complete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__create_commands] )) ||
_swissarmyhammer__issue__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__current_commands] )) ||
_swissarmyhammer__issue__current_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue current commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help_commands] )) ||
_swissarmyhammer__issue__help_commands() {
    local commands; commands=(
'create:Create a new issue' \
'list:List all issues' \
'show:Show issue details' \
'update:Update an issue' \
'complete:Mark issue as complete' \
'work:Start working on an issue' \
'merge:Merge completed issue' \
'current:Show current issue' \
'status:Show project status' \
'next:Show the next issue to work on' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer issue help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__complete_commands] )) ||
_swissarmyhammer__issue__help__complete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help complete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__create_commands] )) ||
_swissarmyhammer__issue__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__current_commands] )) ||
_swissarmyhammer__issue__help__current_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help current commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__help_commands] )) ||
_swissarmyhammer__issue__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__list_commands] )) ||
_swissarmyhammer__issue__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__merge_commands] )) ||
_swissarmyhammer__issue__help__merge_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help merge commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__next_commands] )) ||
_swissarmyhammer__issue__help__next_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help next commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__show_commands] )) ||
_swissarmyhammer__issue__help__show_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help show commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__status_commands] )) ||
_swissarmyhammer__issue__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__update_commands] )) ||
_swissarmyhammer__issue__help__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__work_commands] )) ||
_swissarmyhammer__issue__help__work_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help work commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__list_commands] )) ||
_swissarmyhammer__issue__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__merge_commands] )) ||
_swissarmyhammer__issue__merge_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue merge commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__next_commands] )) ||
_swissarmyhammer__issue__next_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue next commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__show_commands] )) ||
_swissarmyhammer__issue__show_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue show commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__status_commands] )) ||
_swissarmyhammer__issue__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__update_commands] )) ||
_swissarmyhammer__issue__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__work_commands] )) ||
_swissarmyhammer__issue__work_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue work commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo_commands] )) ||
_swissarmyhammer__memo_commands() {
    local commands; commands=(
'create:Create a new memo' \
'list:List all memos' \
'get:Get a specific memo by ID' \
'update:Update a memo'\''s content' \
'delete:Delete a memo' \
'search:Search memos by content and title' \
'context:Get all memos as context for AI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer memo commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__context_commands] )) ||
_swissarmyhammer__memo__context_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo context commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__create_commands] )) ||
_swissarmyhammer__memo__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__delete_commands] )) ||
_swissarmyhammer__memo__delete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo delete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__get_commands] )) ||
_swissarmyhammer__memo__get_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo get commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help_commands] )) ||
_swissarmyhammer__memo__help_commands() {
    local commands; commands=(
'create:Create a new memo' \
'list:List all memos' \
'get:Get a specific memo by ID' \
'update:Update a memo'\''s content' \
'delete:Delete a memo' \
'search:Search memos by content and title' \
'context:Get all memos as context for AI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer memo help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__context_commands] )) ||
_swissarmyhammer__memo__help__context_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help context commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__create_commands] )) ||
_swissarmyhammer__memo__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__delete_commands] )) ||
_swissarmyhammer__memo__help__delete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help delete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__get_commands] )) ||
_swissarmyhammer__memo__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help get commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__help_commands] )) ||
_swissarmyhammer__memo__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__list_commands] )) ||
_swissarmyhammer__memo__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__search_commands] )) ||
_swissarmyhammer__memo__help__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__update_commands] )) ||
_swissarmyhammer__memo__help__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__list_commands] )) ||
_swissarmyhammer__memo__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__search_commands] )) ||
_swissarmyhammer__memo__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__update_commands] )) ||
_swissarmyhammer__memo__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt_commands] )) ||
_swissarmyhammer__prompt_commands() {
    local commands; commands=(
'list:List all available prompts' \
'test:Test prompts interactively with sample arguments' \
'search:Search for prompts with advanced filtering and ranking' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer prompt commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help_commands] )) ||
_swissarmyhammer__prompt__help_commands() {
    local commands; commands=(
'list:List all available prompts' \
'test:Test prompts interactively with sample arguments' \
'search:Search for prompts with advanced filtering and ranking' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer prompt help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help__help_commands] )) ||
_swissarmyhammer__prompt__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help__list_commands] )) ||
_swissarmyhammer__prompt__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt help list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help__search_commands] )) ||
_swissarmyhammer__prompt__help__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt help search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help__test_commands] )) ||
_swissarmyhammer__prompt__help__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt help test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__list_commands] )) ||
_swissarmyhammer__prompt__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__search_commands] )) ||
_swissarmyhammer__prompt__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__test_commands] )) ||
_swissarmyhammer__prompt__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search_commands] )) ||
_swissarmyhammer__search_commands() {
    local commands; commands=(
'index:Index files for semantic search' \
'query:Query indexed files semantically' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__help_commands] )) ||
_swissarmyhammer__search__help_commands() {
    local commands; commands=(
'index:Index files for semantic search' \
'query:Query indexed files semantically' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer search help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__help__help_commands] )) ||
_swissarmyhammer__search__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__help__index_commands] )) ||
_swissarmyhammer__search__help__index_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search help index commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__help__query_commands] )) ||
_swissarmyhammer__search__help__query_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search help query commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__index_commands] )) ||
_swissarmyhammer__search__index_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search index commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__query_commands] )) ||
_swissarmyhammer__search__query_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search query commands' commands "$@"
}
(( $+functions[_swissarmyhammer__serve_commands] )) ||
_swissarmyhammer__serve_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer serve commands' commands "$@"
}
(( $+functions[_swissarmyhammer__validate_commands] )) ||
_swissarmyhammer__validate_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer validate commands' commands "$@"
}

if [ "$funcstack[1]" = "_swissarmyhammer" ]; then
    _swissarmyhammer "$@"
else
    compdef _swissarmyhammer swissarmyhammer
fi
test flow::tests::test_parse_set_variables ... ok
# Print an optspec for argparse to handle cmd's options that are independent of any subcommand.
function __fish_swissarmyhammer_global_optspecs
	string join \n v/verbose d/debug q/quiet h/help V/version
end

function __fish_swissarmyhammer_needs_command
	# Figure out if the current invocation already has a command.
	set -l cmd (commandline -opc)
	set -e cmd[1]
	argparse -s (__fish_swissarmyhammer_global_optspecs) -- $cmd 2>/dev/null
	or return
	if set -q argv[1]
		# Also print the command, so this can be used to figure out what it is.
		echo $argv[1]
		return 1
	end
	return 0
end

function __fish_swissarmyhammer_using_subcommand
	set -l cmd (__fish_swissarmyhammer_needs_command)
	test -z "$cmd"
	and return 1
	contains -- $cmd[1] $argv
end

test flow::tests::test_workflow_run_id_helpers ... ok
test flow::tests::test_execute_workflow_test_mode_no_transitions ... ok
test flow::tests::test_execute_workflow_test_mode_with_variables ... ok
test flow::tests::test_set_variables_in_context ... ok
test flow::tests::test_execute_workflow_test_mode_with_conditions ... ok
test list::tests::test_prompt_info_creation ... ok
test flow::tests::test_execute_workflow_test_mode_empty_workflow ... ok
test flow::tests::test_execute_workflow_test_mode_simple_workflow ... ok
test list::tests::test_title_extraction_logic ... ok
test mcp_integration::tests::test_create_arguments ... ok
test mcp_integration::tests::test_rate_limiter_creation ... ok
test mcp_integration::tests::test_response_formatting ... ok
test search::tests::test_file_line_format ... ok
test search::tests::test_generate_excerpt ... ok
test search::tests::test_generate_excerpt_with_long_text ... ok
test search::tests::test_run_semantic_index_empty_patterns ... ok
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s v -l verbose -d 'Enable verbose logging'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s d -l debug -d 'Enable debug logging'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s q -l quiet -d 'Suppress all output except errors'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s V -l version -d 'Print version'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "serve" -d 'Run as MCP server (default when invoked via stdio)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "doctor" -d 'Diagnose configuration and setup issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "prompt" -d 'Manage and test prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "flow" -d 'Execute and manage workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "completion" -d 'Generate shell completion scripts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "validate" -d 'Validate prompt files and workflows for syntax and best practices'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "issue" -d 'Issue management commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "memo" -d 'Memoranda (memo) management commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "search" -d 'Semantic search commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand serve" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand doctor" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -f -a "list" -d 'List all available prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -f -a "test" -d 'Test prompts interactively with sample arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -f -a "search" -d 'Search for prompts with advanced filtering and ranking'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -l source -d 'Filter by source' -r -f -a "builtin\t''
user\t''
local\t''
dynamic\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -l category -d 'Filter by category' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -l search -d 'Search prompts by name or description' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Show verbose output including arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -s f -l file -d 'Path to prompt file to test' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l arg -d 'Non-interactive mode: specify arguments as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l set -d 'Set template variables for liquid rendering as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l save -d 'Save rendered prompt to file' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l raw -d 'Show raw output without formatting'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l copy -d 'Copy rendered prompt to clipboard'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l debug -d 'Show debug information (template, args, processing steps)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l in -d 'Search in specific fields (name, title, description, content, arguments)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l source -d 'Filter by source' -r -f -a "builtin\t''
user\t''
local\t''
dynamic\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l has-arg -d 'Find prompts with specific argument name' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -s l -l limit -d 'Maximum number of results to show' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -s r -l regex -d 'Use regular expressions'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -s f -l fuzzy -d 'Enable fuzzy matching for typo tolerance'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l case-sensitive -d 'Case-sensitive search'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l no-args -d 'Find prompts without any arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l full -d 'Show complete prompt details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l highlight -d 'Highlight matching terms in output'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all available prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from help" -f -a "test" -d 'Test prompts interactively with sample arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from help" -f -a "search" -d 'Search for prompts with advanced filtering and ranking'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "run" -d 'Run a workflow'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "resume" -d 'Resume a paused workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "list" -d 'List available workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "status" -d 'Check status of a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "logs" -d 'View logs for a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "metrics" -d 'View metrics for workflow runs'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "visualize" -d 'Generate execution visualization'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "test" -d 'Test a workflow without executing actions (simulates dry run)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l var -d 'Initial variables as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l set -d 'Set template variables for liquid rendering in action strings as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l timeout -d 'Execution timeout (e.g., 30s, 5m, 1h)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -s i -l interactive -d 'Interactive mode - prompt at each state'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l dry-run -d 'Dry run - show execution plan without running'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l test -d 'Test mode - execute with mocked actions and generate coverage report'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -s q -l quiet -d 'Quiet mode - only show errors'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from resume" -l timeout -d 'Execution timeout (e.g., 30s, 5m, 1h)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from resume" -s i -l interactive -d 'Interactive mode - prompt at each state'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from resume" -s q -l quiet -d 'Quiet mode - only show errors'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from resume" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from list" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from list" -l source -d 'Filter by source' -r -f -a "builtin\t''
user\t''
local\t''
dynamic\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Show verbose output including workflow details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from status" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from status" -s w -l watch -d 'Watch for status changes'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from status" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from logs" -s n -l tail -d 'Number of log lines to show (from end)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from logs" -l level -d 'Filter logs by level (info, warn, error)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from logs" -s f -l follow -d 'Follow log output (like tail -f)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from logs" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from metrics" -l workflow -d 'Workflow name to filter by' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from metrics" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from metrics" -s g -l global -d 'Show global metrics summary'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from metrics" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -l format -d 'Output format' -r -f -a "mermaid\t''
html\t''
json\t''
dot\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -s o -l output -d 'Output file path (optional - prints to stdout if not specified)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -l timing -d 'Include timing information'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -l counts -d 'Include execution counts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -l path-only -d 'Show only executed path'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -l var -d 'Initial variables as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -l set -d 'Set template variables for liquid rendering in action strings as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -l timeout -d 'Execution timeout (e.g., 30s, 5m, 1h)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -s i -l interactive -d 'Interactive mode - prompt at each state'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -s q -l quiet -d 'Quiet mode - only show errors'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "run" -d 'Run a workflow'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "resume" -d 'Resume a paused workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "list" -d 'List available workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "status" -d 'Check status of a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "logs" -d 'View logs for a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "metrics" -d 'View metrics for workflow runs'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "visualize" -d 'Generate execution visualization'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "test" -d 'Test a workflow without executing actions (simulates dry run)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand completion" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand validate" -l format -d 'Output format' -r -f -a "text\t''
json\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand validate" -l workflow-dir -d '\\[DEPRECATED\\] This parameter is ignored. Workflows are now only loaded from standard locations' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand validate" -s q -l quiet -d 'Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand validate" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "create" -d 'Create a new issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "list" -d 'List all issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "show" -d 'Show issue details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "update" -d 'Update an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "complete" -d 'Mark issue as complete'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "work" -d 'Start working on an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "merge" -d 'Merge completed issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "current" -d 'Show current issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "status" -d 'Show project status'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "next" -d 'Show the next issue to work on'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from create" -s c -l content -d 'Issue content (use - for stdin)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from create" -s f -l file -d 'Read content from file' -r -F
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from create" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from list" -s f -l format -d 'Output format (table, json, markdown)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from list" -s c -l completed -d 'Show completed issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from list" -s a -l active -d 'Show active issues only'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from show" -s r -l raw -d 'Show raw content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from show" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from update" -s c -l content -d 'New content (use - for stdin)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from update" -s f -l file -d 'Read content from file' -r -F
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from update" -s a -l append -d 'Append to existing content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from update" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from complete" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from work" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from merge" -s k -l keep-branch -d 'Keep branch after merge'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from merge" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from current" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from status" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from next" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "create" -d 'Create a new issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "show" -d 'Show issue details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "update" -d 'Update an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "complete" -d 'Mark issue as complete'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "work" -d 'Start working on an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "merge" -d 'Merge completed issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "current" -d 'Show current issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "status" -d 'Show project status'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "next" -d 'Show the next issue to work on'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "create" -d 'Create a new memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "list" -d 'List all memos'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "get" -d 'Get a specific memo by ID'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "update" -d 'Update a memo\'s content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "delete" -d 'Delete a memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "search" -d 'Search memos by content and title'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "context" -d 'Get all memos as context for AI'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from create" -s c -l content -d 'Memo content (use - for stdin)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from create" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from get" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from update" -s c -l content -d 'New content (use - for stdin)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from update" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from delete" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from search" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from context" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "create" -d 'Create a new memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all memos'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "get" -d 'Get a specific memo by ID'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "update" -d 'Update a memo\'s content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "delete" -d 'Delete a memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "search" -d 'Search memos by content and title'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "context" -d 'Get all memos as context for AI'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and not __fish_seen_subcommand_from index query help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and not __fish_seen_subcommand_from index query help" -f -a "index" -d 'Index files for semantic search'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and not __fish_seen_subcommand_from index query help" -f -a "query" -d 'Query indexed files semantically'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and not __fish_seen_subcommand_from index query help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from index" -s f -l force -d 'Force re-indexing of all files'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from index" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from query" -s l -l limit -d 'Number of results to return' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from query" -s f -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from query" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from help" -f -a "index" -d 'Index files for semantic search'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from help" -f -a "query" -d 'Query indexed files semantically'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "serve" -d 'Run as MCP server (default when invoked via stdio)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "doctor" -d 'Diagnose configuration and setup issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "prompt" -d 'Manage and test prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "flow" -d 'Execute and manage workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "completion" -d 'Generate shell completion scripts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "validate" -d 'Validate prompt files and workflows for syntax and best practices'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "issue" -d 'Issue management commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "memo" -d 'Memoranda (memo) management commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "search" -d 'Semantic search commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from prompt" -f -a "list" -d 'List all available prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from prompt" -f -a "test" -d 'Test prompts interactively with sample arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from prompt" -f -a "search" -d 'Search for prompts with advanced filtering and ranking'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "run" -d 'Run a workflow'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "resume" -d 'Resume a paused workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "list" -d 'List available workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "status" -d 'Check status of a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "logs" -d 'View logs for a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "metrics" -d 'View metrics for workflow runs'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "visualize" -d 'Generate execution visualization'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "test" -d 'Test a workflow without executing actions (simulates dry run)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "create" -d 'Create a new issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "list" -d 'List all issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "show" -d 'Show issue details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "update" -d 'Update an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "complete" -d 'Mark issue as complete'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "work" -d 'Start working on an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "merge" -d 'Merge completed issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "current" -d 'Show current issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "status" -d 'Show project status'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "next" -d 'Show the next issue to work on'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "create" -d 'Create a new memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "list" -d 'List all memos'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "get" -d 'Get a specific memo by ID'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "update" -d 'Update a memo\'s content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "delete" -d 'Delete a memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "search" -d 'Search memos by content and title'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "context" -d 'Get all memos as context for AI'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from search" -f -a "index" -d 'Index files for semantic search'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from search" -f -a "query" -d 'Query indexed files semantically'
test search::tests::test_search_result_creation ... ok
test completions::tests::test_generate_completions_to_directory ... ok

using namespace System.Management.Automation
using namespace System.Management.Automation.Language

Register-ArgumentCompleter -Native -CommandName 'swissarmyhammer' -ScriptBlock {
    param($wordToComplete, $commandAst, $cursorPosition)

    $commandElements = $commandAst.CommandElements
    $command = @(
        'swissarmyhammer'
        for ($i = 1; $i -lt $commandElements.Count; $i++) {
            $element = $commandElements[$i]
            if ($element -isnot [StringConstantExpressionAst] -or
                $element.StringConstantType -ne [StringConstantType]::BareWord -or
                $element.Value.StartsWith('-') -or
                $element.Value -eq $wordToComplete) {
                break
        }
        $element.Value
    }) -join ';'

    $completions = @(switch ($command) {
        'swissarmyhammer' {
            [CompletionResult]::new('-v', '-v', [CompletionResultType]::ParameterName, 'Enable verbose logging')
            [CompletionResult]::new('--verbose', '--verbose', [CompletionResultType]::ParameterName, 'Enable verbose logging')
            [CompletionResult]::new('-d', '-d', [CompletionResultType]::ParameterName, 'Enable debug logging')
            [CompletionResult]::new('--debug', '--debug', [CompletionResultType]::ParameterName, 'Enable debug logging')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Suppress all output except errors')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Suppress all output except errors')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('-V', '-V ', [CompletionResultType]::ParameterName, 'Print version')
            [CompletionResult]::new('--version', '--version', [CompletionResultType]::ParameterName, 'Print version')
            [CompletionResult]::new('serve', 'serve', [CompletionResultType]::ParameterValue, 'Run as MCP server (default when invoked via stdio)')
            [CompletionResult]::new('doctor', 'doctor', [CompletionResultType]::ParameterValue, 'Diagnose configuration and setup issues')
            [CompletionResult]::new('prompt', 'prompt', [CompletionResultType]::ParameterValue, 'Manage and test prompts')
            [CompletionResult]::new('flow', 'flow', [CompletionResultType]::ParameterValue, 'Execute and manage workflows')
            [CompletionResult]::new('completion', 'completion', [CompletionResultType]::ParameterValue, 'Generate shell completion scripts')
            [CompletionResult]::new('validate', 'validate', [CompletionResultType]::ParameterValue, 'Validate prompt files and workflows for syntax and best practices')
            [CompletionResult]::new('issue', 'issue', [CompletionResultType]::ParameterValue, 'Issue management commands')
            [CompletionResult]::new('memo', 'memo', [CompletionResultType]::ParameterValue, 'Memoranda (memo) management commands')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Semantic search commands')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;serve' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;doctor' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;prompt' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all available prompts')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test prompts interactively with sample arguments')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search for prompts with advanced filtering and ranking')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;prompt;list' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('--source', '--source', [CompletionResultType]::ParameterName, 'Filter by source')
            [CompletionResult]::new('--category', '--category', [CompletionResultType]::ParameterName, 'Filter by category')
            [CompletionResult]::new('--search', '--search', [CompletionResultType]::ParameterName, 'Search prompts by name or description')
            [CompletionResult]::new('-v', '-v', [CompletionResultType]::ParameterName, 'Show verbose output including arguments')
            [CompletionResult]::new('--verbose', '--verbose', [CompletionResultType]::ParameterName, 'Show verbose output including arguments')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;prompt;test' {
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Path to prompt file to test')
            [CompletionResult]::new('--file', '--file', [CompletionResultType]::ParameterName, 'Path to prompt file to test')
            [CompletionResult]::new('--arg', '--arg', [CompletionResultType]::ParameterName, 'Non-interactive mode: specify arguments as key=value pairs')
            [CompletionResult]::new('--set', '--set', [CompletionResultType]::ParameterName, 'Set template variables for liquid rendering as key=value pairs')
            [CompletionResult]::new('--save', '--save', [CompletionResultType]::ParameterName, 'Save rendered prompt to file')
            [CompletionResult]::new('--raw', '--raw', [CompletionResultType]::ParameterName, 'Show raw output without formatting')
            [CompletionResult]::new('--copy', '--copy', [CompletionResultType]::ParameterName, 'Copy rendered prompt to clipboard')
            [CompletionResult]::new('--debug', '--debug', [CompletionResultType]::ParameterName, 'Show debug information (template, args, processing steps)')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;prompt;search' {
            [CompletionResult]::new('--in', '--in', [CompletionResultType]::ParameterName, 'Search in specific fields (name, title, description, content, arguments)')
            [CompletionResult]::new('--source', '--source', [CompletionResultType]::ParameterName, 'Filter by source')
            [CompletionResult]::new('--has-arg', '--has-arg', [CompletionResultType]::ParameterName, 'Find prompts with specific argument name')
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-l', '-l', [CompletionResultType]::ParameterName, 'Maximum number of results to show')
            [CompletionResult]::new('--limit', '--limit', [CompletionResultType]::ParameterName, 'Maximum number of results to show')
            [CompletionResult]::new('-r', '-r', [CompletionResultType]::ParameterName, 'Use regular expressions')
            [CompletionResult]::new('--regex', '--regex', [CompletionResultType]::ParameterName, 'Use regular expressions')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Enable fuzzy matching for typo tolerance')
            [CompletionResult]::new('--fuzzy', '--fuzzy', [CompletionResultType]::ParameterName, 'Enable fuzzy matching for typo tolerance')
            [CompletionResult]::new('--case-sensitive', '--case-sensitive', [CompletionResultType]::ParameterName, 'Case-sensitive search')
            [CompletionResult]::new('--no-args', '--no-args', [CompletionResultType]::ParameterName, 'Find prompts without any arguments')
            [CompletionResult]::new('--full', '--full', [CompletionResultType]::ParameterName, 'Show complete prompt details')
            [CompletionResult]::new('--highlight', '--highlight', [CompletionResultType]::ParameterName, 'Highlight matching terms in output')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;prompt;help' {
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all available prompts')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test prompts interactively with sample arguments')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search for prompts with advanced filtering and ranking')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;prompt;help;list' {
            break
        }
        'swissarmyhammer;prompt;help;test' {
            break
        }
        'swissarmyhammer;prompt;help;search' {
            break
        }
        'swissarmyhammer;prompt;help;help' {
            break
        }
        'swissarmyhammer;flow' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('run', 'run', [CompletionResultType]::ParameterValue, 'Run a workflow')
            [CompletionResult]::new('resume', 'resume', [CompletionResultType]::ParameterValue, 'Resume a paused workflow run')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List available workflows')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Check status of a workflow run')
            [CompletionResult]::new('logs', 'logs', [CompletionResultType]::ParameterValue, 'View logs for a workflow run')
            [CompletionResult]::new('metrics', 'metrics', [CompletionResultType]::ParameterValue, 'View metrics for workflow runs')
            [CompletionResult]::new('visualize', 'visualize', [CompletionResultType]::ParameterValue, 'Generate execution visualization')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test a workflow without executing actions (simulates dry run)')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;flow;run' {
            [CompletionResult]::new('--var', '--var', [CompletionResultType]::ParameterName, 'Initial variables as key=value pairs')
            [CompletionResult]::new('--set', '--set', [CompletionResultType]::ParameterName, 'Set template variables for liquid rendering in action strings as key=value pairs')
            [CompletionResult]::new('--timeout', '--timeout', [CompletionResultType]::ParameterName, 'Execution timeout (e.g., 30s, 5m, 1h)')
            [CompletionResult]::new('-i', '-i', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('--interactive', '--interactive', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('--dry-run', '--dry-run', [CompletionResultType]::ParameterName, 'Dry run - show execution plan without running')
            [CompletionResult]::new('--test', '--test', [CompletionResultType]::ParameterName, 'Test mode - execute with mocked actions and generate coverage report')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;resume' {
            [CompletionResult]::new('--timeout', '--timeout', [CompletionResultType]::ParameterName, 'Execution timeout (e.g., 30s, 5m, 1h)')
            [CompletionResult]::new('-i', '-i', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('--interactive', '--interactive', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;list' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('--source', '--source', [CompletionResultType]::ParameterName, 'Filter by source')
            [CompletionResult]::new('-v', '-v', [CompletionResultType]::ParameterName, 'Show verbose output including workflow details')
            [CompletionResult]::new('--verbose', '--verbose', [CompletionResultType]::ParameterName, 'Show verbose output including workflow details')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;status' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-w', '-w', [CompletionResultType]::ParameterName, 'Watch for status changes')
            [CompletionResult]::new('--watch', '--watch', [CompletionResultType]::ParameterName, 'Watch for status changes')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;logs' {
            [CompletionResult]::new('-n', '-n', [CompletionResultType]::ParameterName, 'Number of log lines to show (from end)')
            [CompletionResult]::new('--tail', '--tail', [CompletionResultType]::ParameterName, 'Number of log lines to show (from end)')
            [CompletionResult]::new('--level', '--level', [CompletionResultType]::ParameterName, 'Filter logs by level (info, warn, error)')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Follow log output (like tail -f)')
            [CompletionResult]::new('--follow', '--follow', [CompletionResultType]::ParameterName, 'Follow log output (like tail -f)')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;metrics' {
            [CompletionResult]::new('--workflow', '--workflow', [CompletionResultType]::ParameterName, 'Workflow name to filter by')
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-g', '-g', [CompletionResultType]::ParameterName, 'Show global metrics summary')
            [CompletionResult]::new('--global', '--global', [CompletionResultType]::ParameterName, 'Show global metrics summary')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;visualize' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-o', '-o', [CompletionResultType]::ParameterName, 'Output file path (optional - prints to stdout if not specified)')
            [CompletionResult]::new('--output', '--output', [CompletionResultType]::ParameterName, 'Output file path (optional - prints to stdout if not specified)')
            [CompletionResult]::new('--timing', '--timing', [CompletionResultType]::ParameterName, 'Include timing information')
            [CompletionResult]::new('--counts', '--counts', [CompletionResultType]::ParameterName, 'Include execution counts')
            [CompletionResult]::new('--path-only', '--path-only', [CompletionResultType]::ParameterName, 'Show only executed path')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;test' {
            [CompletionResult]::new('--var', '--var', [CompletionResultType]::ParameterName, 'Initial variables as key=value pairs')
            [CompletionResult]::new('--set', '--set', [CompletionResultType]::ParameterName, 'Set template variables for liquid rendering in action strings as key=value pairs')
            [CompletionResult]::new('--timeout', '--timeout', [CompletionResultType]::ParameterName, 'Execution timeout (e.g., 30s, 5m, 1h)')
            [CompletionResult]::new('-i', '-i', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('--interactive', '--interactive', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;flow;help' {
            [CompletionResult]::new('run', 'run', [CompletionResultType]::ParameterValue, 'Run a workflow')
            [CompletionResult]::new('resume', 'resume', [CompletionResultType]::ParameterValue, 'Resume a paused workflow run')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List available workflows')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Check status of a workflow run')
            [CompletionResult]::new('logs', 'logs', [CompletionResultType]::ParameterValue, 'View logs for a workflow run')
            [CompletionResult]::new('metrics', 'metrics', [CompletionResultType]::ParameterValue, 'View metrics for workflow runs')
            [CompletionResult]::new('visualize', 'visualize', [CompletionResultType]::ParameterValue, 'Generate execution visualization')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test a workflow without executing actions (simulates dry run)')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;flow;help;run' {
            break
        }
        'swissarmyhammer;flow;help;resume' {
            break
        }
        'swissarmyhammer;flow;help;list' {
            break
        }
        'swissarmyhammer;flow;help;status' {
            break
        }
        'swissarmyhammer;flow;help;logs' {
            break
        }
        'swissarmyhammer;flow;help;metrics' {
            break
        }
        'swissarmyhammer;flow;help;visualize' {
            break
        }
        'swissarmyhammer;flow;help;test' {
            break
        }
        'swissarmyhammer;flow;help;help' {
            break
        }
        'swissarmyhammer;completion' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;validate' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('--workflow-dir', '--workflow-dir', [CompletionResultType]::ParameterName, '\[DEPRECATED\] This parameter is ignored. Workflows are now only loaded from standard locations')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;issue' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new issue')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all issues')
            [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterValue, 'Show issue details')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update an issue')
            [CompletionResult]::new('complete', 'complete', [CompletionResultType]::ParameterValue, 'Mark issue as complete')
            [CompletionResult]::new('work', 'work', [CompletionResultType]::ParameterValue, 'Start working on an issue')
            [CompletionResult]::new('merge', 'merge', [CompletionResultType]::ParameterValue, 'Merge completed issue')
            [CompletionResult]::new('current', 'current', [CompletionResultType]::ParameterValue, 'Show current issue')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Show project status')
            [CompletionResult]::new('next', 'next', [CompletionResultType]::ParameterValue, 'Show the next issue to work on')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;issue;create' {
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'Issue content (use - for stdin)')
            [CompletionResult]::new('--content', '--content', [CompletionResultType]::ParameterName, 'Issue content (use - for stdin)')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Read content from file')
            [CompletionResult]::new('--file', '--file', [CompletionResultType]::ParameterName, 'Read content from file')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;list' {
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Output format (table, json, markdown)')
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format (table, json, markdown)')
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'Show completed issues')
            [CompletionResult]::new('--completed', '--completed', [CompletionResultType]::ParameterName, 'Show completed issues')
            [CompletionResult]::new('-a', '-a', [CompletionResultType]::ParameterName, 'Show active issues only')
            [CompletionResult]::new('--active', '--active', [CompletionResultType]::ParameterName, 'Show active issues only')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;show' {
            [CompletionResult]::new('-r', '-r', [CompletionResultType]::ParameterName, 'Show raw content')
            [CompletionResult]::new('--raw', '--raw', [CompletionResultType]::ParameterName, 'Show raw content')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;update' {
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'New content (use - for stdin)')
            [CompletionResult]::new('--content', '--content', [CompletionResultType]::ParameterName, 'New content (use - for stdin)')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Read content from file')
            [CompletionResult]::new('--file', '--file', [CompletionResultType]::ParameterName, 'Read content from file')
            [CompletionResult]::new('-a', '-a', [CompletionResultType]::ParameterName, 'Append to existing content')
            [CompletionResult]::new('--append', '--append', [CompletionResultType]::ParameterName, 'Append to existing content')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;complete' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;work' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;merge' {
            [CompletionResult]::new('-k', '-k', [CompletionResultType]::ParameterName, 'Keep branch after merge')
            [CompletionResult]::new('--keep-branch', '--keep-branch', [CompletionResultType]::ParameterName, 'Keep branch after merge')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;current' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;status' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;next' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;help' {
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new issue')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all issues')
            [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterValue, 'Show issue details')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update an issue')
            [CompletionResult]::new('complete', 'complete', [CompletionResultType]::ParameterValue, 'Mark issue as complete')
            [CompletionResult]::new('work', 'work', [CompletionResultType]::ParameterValue, 'Start working on an issue')
            [CompletionResult]::new('merge', 'merge', [CompletionResultType]::ParameterValue, 'Merge completed issue')
            [CompletionResult]::new('current', 'current', [CompletionResultType]::ParameterValue, 'Show current issue')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Show project status')
            [CompletionResult]::new('next', 'next', [CompletionResultType]::ParameterValue, 'Show the next issue to work on')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;issue;help;create' {
            break
        }
        'swissarmyhammer;issue;help;list' {
            break
        }
        'swissarmyhammer;issue;help;show' {
            break
        }
        'swissarmyhammer;issue;help;update' {
            break
        }
        'swissarmyhammer;issue;help;complete' {
            break
        }
        'swissarmyhammer;issue;help;work' {
            break
        }
        'swissarmyhammer;issue;help;merge' {
            break
        }
        'swissarmyhammer;issue;help;current' {
            break
        }
        'swissarmyhammer;issue;help;status' {
            break
        }
        'swissarmyhammer;issue;help;next' {
            break
        }
        'swissarmyhammer;issue;help;help' {
            break
        }
        'swissarmyhammer;memo' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new memo')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all memos')
            [CompletionResult]::new('get', 'get', [CompletionResultType]::ParameterValue, 'Get a specific memo by ID')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update a memo''s content')
            [CompletionResult]::new('delete', 'delete', [CompletionResultType]::ParameterValue, 'Delete a memo')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search memos by content and title')
            [CompletionResult]::new('context', 'context', [CompletionResultType]::ParameterValue, 'Get all memos as context for AI')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;memo;create' {
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'Memo content (use - for stdin)')
            [CompletionResult]::new('--content', '--content', [CompletionResultType]::ParameterName, 'Memo content (use - for stdin)')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;list' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;get' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;update' {
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'New content (use - for stdin)')
            [CompletionResult]::new('--content', '--content', [CompletionResultType]::ParameterName, 'New content (use - for stdin)')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;delete' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;search' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;context' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;help' {
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new memo')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all memos')
            [CompletionResult]::new('get', 'get', [CompletionResultType]::ParameterValue, 'Get a specific memo by ID')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update a memo''s content')
            [CompletionResult]::new('delete', 'delete', [CompletionResultType]::ParameterValue, 'Delete a memo')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search memos by content and title')
            [CompletionResult]::new('context', 'context', [CompletionResultType]::ParameterValue, 'Get all memos as context for AI')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;memo;help;create' {
            break
        }
        'swissarmyhammer;memo;help;list' {
            break
        }
        'swissarmyhammer;memo;help;get' {
            break
        }
        'swissarmyhammer;memo;help;update' {
            break
        }
        'swissarmyhammer;memo;help;delete' {
            break
        }
        'swissarmyhammer;memo;help;search' {
            break
        }
        'swissarmyhammer;memo;help;context' {
            break
        }
        'swissarmyhammer;memo;help;help' {
            break
        }
        'swissarmyhammer;search' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('index', 'index', [CompletionResultType]::ParameterValue, 'Index files for semantic search')
            [CompletionResult]::new('query', 'query', [CompletionResultType]::ParameterValue, 'Query indexed files semantically')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;search;index' {
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Force re-indexing of all files')
            [CompletionResult]::new('--force', '--force', [CompletionResultType]::ParameterName, 'Force re-indexing of all files')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;search;query' {
            [CompletionResult]::new('-l', '-l', [CompletionResultType]::ParameterName, 'Number of results to return')
            [CompletionResult]::new('--limit', '--limit', [CompletionResultType]::ParameterName, 'Number of results to return')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;search;help' {
            [CompletionResult]::new('index', 'index', [CompletionResultType]::ParameterValue, 'Index files for semantic search')
            [CompletionResult]::new('query', 'query', [CompletionResultType]::ParameterValue, 'Query indexed files semantically')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;search;help;index' {
            break
        }
        'swissarmyhammer;search;help;query' {
            break
        }
        'swissarmyhammer;search;help;help' {
            break
        }
        'swissarmyhammer;help' {
            [CompletionResult]::new('serve', 'serve', [CompletionResultType]::ParameterValue, 'Run as MCP server (default when invoked via stdio)')
            [CompletionResult]::new('doctor', 'doctor', [CompletionResultType]::ParameterValue, 'Diagnose configuration and setup issues')
            [CompletionResult]::new('prompt', 'prompt', [CompletionResultType]::ParameterValue, 'Manage and test prompts')
            [CompletionResult]::new('flow', 'flow', [CompletionResultType]::ParameterValue, 'Execute and manage workflows')
            [CompletionResult]::new('completion', 'completion', [CompletionResultType]::ParameterValue, 'Generate shell completion scripts')
            [CompletionResult]::new('validate', 'validate', [CompletionResultType]::ParameterValue, 'Validate prompt files and workflows for syntax and best practices')
            [CompletionResult]::new('issue', 'issue', [CompletionResultType]::ParameterValue, 'Issue management commands')
            [CompletionResult]::new('memo', 'memo', [CompletionResultType]::ParameterValue, 'Memoranda (memo) management commands')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Semantic search commands')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;help;serve' {
            break
        }
        'swissarmyhammer;help;doctor' {
            break
        }
        'swissarmyhammer;help;prompt' {
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all available prompts')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test prompts interactively with sample arguments')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search for prompts with advanced filtering and ranking')
            break
        }
        'swissarmyhammer;help;prompt;list' {
            break
        }
        'swissarmyhammer;help;prompt;test' {
            break
        }
        'swissarmyhammer;help;prompt;search' {
            break
        }
        'swissarmyhammer;help;flow' {
            [CompletionResult]::new('run', 'run', [CompletionResultType]::ParameterValue, 'Run a workflow')
            [CompletionResult]::new('resume', 'resume', [CompletionResultType]::ParameterValue, 'Resume a paused workflow run')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List available workflows')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Check status of a workflow run')
            [CompletionResult]::new('logs', 'logs', [CompletionResultType]::ParameterValue, 'View logs for a workflow run')
            [CompletionResult]::new('metrics', 'metrics', [CompletionResultType]::ParameterValue, 'View metrics for workflow runs')
            [CompletionResult]::new('visualize', 'visualize', [CompletionResultType]::ParameterValue, 'Generate execution visualization')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test a workflow without executing actions (simulates dry run)')
            break
        }
        'swissarmyhammer;help;flow;run' {
            break
        }
        'swissarmyhammer;help;flow;resume' {
            break
        }
        'swissarmyhammer;help;flow;list' {
            break
        }
        'swissarmyhammer;help;flow;status' {
            break
        }
        'swissarmyhammer;help;flow;logs' {
            break
        }
        'swissarmyhammer;help;flow;metrics' {
            break
        }
        'swissarmyhammer;help;flow;visualize' {
            break
        }
        'swissarmyhammer;help;flow;test' {
            break
        }
        'swissarmyhammer;help;completion' {
            break
        }
        'swissarmyhammer;help;validate' {
            break
        }
        'swissarmyhammer;help;issue' {
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new issue')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all issues')
            [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterValue, 'Show issue details')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update an issue')
            [CompletionResult]::new('complete', 'complete', [CompletionResultType]::ParameterValue, 'Mark issue as complete')
            [CompletionResult]::new('work', 'work', [CompletionResultType]::ParameterValue, 'Start working on an issue')
            [CompletionResult]::new('merge', 'merge', [CompletionResultType]::ParameterValue, 'Merge completed issue')
            [CompletionResult]::new('current', 'current', [CompletionResultType]::ParameterValue, 'Show current issue')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Show project status')
            [CompletionResult]::new('next', 'next', [CompletionResultType]::ParameterValue, 'Show the next issue to work on')
            break
        }
        'swissarmyhammer;help;issue;create' {
            break
        }
        'swissarmyhammer;help;issue;list' {
            break
        }
        'swissarmyhammer;help;issue;show' {
            break
        }
        'swissarmyhammer;help;issue;update' {
            break
        }
        'swissarmyhammer;help;issue;complete' {
            break
        }
        'swissarmyhammer;help;issue;work' {
            break
        }
        'swissarmyhammer;help;issue;merge' {
            break
        }
        'swissarmyhammer;help;issue;current' {
            break
        }
        'swissarmyhammer;help;issue;status' {
            break
        }
        'swissarmyhammer;help;issue;next' {
            break
        }
        'swissarmyhammer;help;memo' {
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new memo')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all memos')
            [CompletionResult]::new('get', 'get', [CompletionResultType]::ParameterValue, 'Get a specific memo by ID')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update a memo''s content')
            [CompletionResult]::new('delete', 'delete', [CompletionResultType]::ParameterValue, 'Delete a memo')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search memos by content and title')
            [CompletionResult]::new('context', 'context', [CompletionResultType]::ParameterValue, 'Get all memos as context for AI')
            break
        }
        'swissarmyhammer;help;memo;create' {
            break
        }
        'swissarmyhammer;help;memo;list' {
            break
        }
        'swissarmyhammer;help;memo;get' {
            break
        }
        'swissarmyhammer;help;memo;update' {
            break
        }
        'swissarmyhammer;help;memo;delete' {
            break
        }
        'swissarmyhammer;help;memo;search' {
            break
        }
        'swissarmyhammer;help;memo;context' {
            break
        }
        'swissarmyhammer;help;search' {
            [CompletionResult]::new('index', 'index', [CompletionResultType]::ParameterValue, 'Index files for semantic search')
            [CompletionResult]::new('query', 'query', [CompletionResultType]::ParameterValue, 'Query indexed files semantically')
            break
        }
        'swissarmyhammer;help;search;index' {
            break
        }
        'swissarmyhammer;help;search;query' {
            break
        }
        'swissarmyhammer;help;help' {
            break
        }
    })

    $completions.Where{ $_.CompletionText -like "$wordToComplete*" } |
        Sort-Object -Property ListItemText
}
test completions::tests::test_print_completion_function ... ok
example | Example Prompt
  An example prompt for testing

say-hello | Say Hello
  A simple greeting prompt that can be customized with name and language

test list::tests::test_builtin_prompts_should_be_identified_correctly ... ok
abort | Abort current execution
  A quick way to stop the world.

code.md | Code.md
  Partial template for reuse in other prompts

coding_standards.md | Coding Standards.md
  Partial template for reuse in other prompts

documentation.md | Documentation.md
  Partial template for reuse in other prompts

empty.md | Empty.md
  Partial template for reuse in other prompts

issue/code | issue_code
  Code up an issue

issue/on_worktree.md | Issue/on Worktree.md
  Partial template for reuse in other prompts

principals.md | Principals.md
  Partial template for reuse in other prompts

review_format.md | Review Format.md
  Partial template for reuse in other prompts

todo.md | Todo.md
  Partial template for reuse in other prompts

test mcp_integration::tests::test_cli_tool_context_creation ... ok
abort | Abort current execution
  A quick way to stop the world.

are_issues_complete | are_issues_complete
  Check if the plan is complete.

are_reviews_done | are_reviews_done
  Check if all the code review items are complete.

are_tests_passing | are_tests_passing
  Check if all tests are passing.

code | Code
  Partial template for reuse in other prompts

code.md | Code.md
  Partial template for reuse in other prompts

code/issue | do_issue
  Code up an issue

code/review | Do Code Review
  Code up the code review

coding_standards | Coding Standards
  Partial template for reuse in other prompts

coding_standards.md | Coding Standards.md
  Partial template for reuse in other prompts

commit | Commit
  Commit your work to git.

coverage | coverage
  Improve coverage.

debug/error | Debug Error Messages
  Analyze error messages and provide debugging guidance with potential solutions

debug/logs | Analyze Log Files
  Analyze log files to identify issues and patterns

docs/comments | Generate Code Comments
  Add comprehensive comments and documentation to code

docs/readme | Generate README Documentation
  Create comprehensive README documentation for a project

document | document
  Create documentation for the project

documentation | Documentation
  Partial template for reuse in other prompts

documentation.md | Documentation.md
  Partial template for reuse in other prompts

empty | Empty
  Partial template for reuse in other prompts

test list::tests::test_list_command_with_search ... ok
empty.md | Empty.md
  Partial template for reuse in other prompts

example | Example Prompt
  An example prompt for testing

help | Help Assistant
  A prompt for providing helpful assistance and guidance to users

issue/branch | issue_branch
  Create an issue work branch for the next issue to work

issue/code | issue_code
  Code up an issue

issue/complete | Issue Complete
  Mark an issue as complete

issue/on_worktree.md | Issue/on Worktree.md
  Partial template for reuse in other prompts

merge | merge
  Merge your work into the main branch.

plan | plan
  Generate a step by step development plan from a specification.

principals | Principals
  Partial template for reuse in other prompts

principals.md | Principals.md
  Partial template for reuse in other prompts

prompts/create | Create New Prompt
  Help create effective prompts for swissarmyhammer

prompts/improve | Improve Existing Prompt
  Analyze and enhance existing prompts for better effectiveness

review/accessibility | Accessibility Review
  Review code for accessibility compliance and best practices

review/branch | review code
  Improved the current code changes

review/code | Code Review
  Review code for quality, bugs, and improvements

review/documentation | review documentation
  Improved the documentation for the project

review/patterns | Pattern Code Review
  Perform a comprehensive review of the code to improve pattern use.

review/security | Security Code Review
  Perform a comprehensive security review of code to identify vulnerabilities

review_format | Review Format
  Partial template for reuse in other prompts

review_format.md | Review Format.md
  Partial template for reuse in other prompts

say-hello | Say Hello
  A simple greeting prompt that can be customized with name and language

test | test
  Iterate to correct test failures in the codebase.

todo | Todo
  Partial template for reuse in other prompts

todo.md | Todo.md
  Partial template for reuse in other prompts

abort | Abort current execution
  A quick way to stop the world.

are_issues_complete | are_issues_complete
  Check if the plan is complete.

are_reviews_done | are_reviews_done
  Check if all the code review items are complete.

are_tests_passing | are_tests_passing
  Check if all tests are passing.

code | Code
  Partial template for reuse in other prompts

code.md | Code.md
  Partial template for reuse in other prompts

code/issue | do_issue
  Code up an issue

code/review | Do Code Review
  Code up the code review

coding_standards | Coding Standards
  Partial template for reuse in other prompts

coding_standards.md | Coding Standards.md
  Partial template for reuse in other prompts

commit | Commit
  Commit your work to git.
test prompt::tests::test_run_prompt_command_test_with_invalid_prompt ... ok

coverage | coverage
  Improve coverage.

debug/error | Debug Error Messages
  Analyze error messages and provide debugging guidance with potential solutions

debug/logs | Analyze Log Files
  Analyze log files to identify issues and patterns

docs/comments | Generate Code Comments
  Add comprehensive comments and documentation to code

docs/readme | Generate README Documentation
  Create comprehensive README documentation for a project

document | document
  Create documentation for the project

documentation | Documentation
  Partial template for reuse in other prompts

documentation.md | Documentation.md
  Partial template for reuse in other prompts

empty | Empty
  Partial template for reuse in other prompts

empty.md | Empty.md
  Partial template for reuse in other prompts

example | Example Prompt
  An example prompt for testing

help | Help Assistant
  A prompt for providing helpful assistance and guidance to users

issue/branch | issue_branch
  Create an issue work branch for the next issue to work

issue/code | issue_code
  Code up an issue

issue/complete | Issue Complete
  Mark an issue as complete

issue/on_worktree.md | Issue/on Worktree.md
  Partial template for reuse in other prompts

merge | merge
  Merge your work into the main branch.

plan | plan
  Generate a step by step development plan from a specification.

principals | Principals
  Partial template for reuse in other prompts

principals.md | Principals.md
  Partial template for reuse in other prompts

prompts/create | Create New Prompt
  Help create effective prompts for swissarmyhammer

prompts/improve | Improve Existing Prompt
  Analyze and enhance existing prompts for better effectiveness

review/accessibility | Accessibility Review
  Review code for accessibility compliance and best practices

review/branch | review code
  Improved the current code changes

review/code | Code Review
  Review code for quality, bugs, and improvements

review/documentation | review documentation
  Improved the documentation for the project

review/patterns | Pattern Code Review
  Perform a comprehensive review of the code to improve pattern use.

review/security | Security Code Review
  Perform a comprehensive security review of code to identify vulnerabilities

review_format | Review Format
  Partial template for reuse in other prompts

review_format.md | Review Format.md
  Partial template for reuse in other prompts

say-hello | Say Hello
  A simple greeting prompt that can be customized with name and language

test | test
  Iterate to correct test failures in the codebase.

todo | Todo
  Partial template for reuse in other prompts

test list::tests::test_list_command_source_filter ... todo.md | Todo.md
  Partial template for reuse in other prompts

ok
test signal_handler::tests::test_signal_handler_setup ... ok
test prompt::tests::test_run_prompt_command_list ... ok
test list::tests::test_list_command_with_no_prompts ... ok
test signal_handler::tests::test_signal_handler_does_not_block ... ok
test test::tests::test_parse_arguments ... ok
test test::tests::test_parse_arguments_invalid_format ... ok
test test::tests::test_parse_arguments_with_set_variables ... ok
test test::tests::test_runner_creation ... ok
test validate::tests::test_partial_template_no_variable_validation_errors ... ok
test mcp_integration::tests::test_rate_limiter_integration ... ok
test validate::tests::test_quiet_mode_hides_warnings_from_summary ... ok
test list::tests::test_list_command_json_format ... ok
test list::tests::test_list_command_yaml_format ... ok
test validate::tests::test_validate_command_includes_workflows ... ok
test signal_handler::tests::test_ctrl_c_signal_setup ... ok
test validate::tests::test_validate_workflow_empty_file ... ok
test validate::tests::test_validate_workflow_complex_edge_cases ... ok
test validate::tests::test_validate_workflow_circular_dependency_structurally_valid ... ok
test validate::tests::test_validate_workflow_advanced_validation_removed ... ok
test validate::tests::test_validate_workflow_empty_name ... ok
test validate::tests::test_validate_workflow_name_allowed_special_chars ... ok
test validate::tests::test_validate_workflow_missing_terminal_state ... ok
test validate::tests::test_validate_workflow_security_handled_by_parsers ... ok
test validate::tests::test_validate_workflow_nested_conditions ... ok
test validate::tests::test_validate_workflow_self_loop ... ok
test validate::tests::test_validate_workflow_syntax_invalid ... ok
test validate::tests::test_validate_workflow_syntax_valid ... ok
test validate::tests::test_validate_workflow_unreachable_states ... ok
test signal_handler::tests::test_unix_terminate_signal_setup ... ok
test validate::tests::test_validate_all_workflows_uses_standard_locations ... ok
test validate::tests::test_validation_result_add_error ... ok
test validate::tests::test_validate_command_loads_same_workflows_as_flow_list ... ok
test validate::tests::test_validation_result_add_warning ... ok
test validate::tests::test_validate_all_workflows_integration ... ok
test test::tests::test_get_prompt_validation ... ok
test validate::tests::test_validate_workflow_malformed_mermaid ... ok
test validate::tests::test_validation_result_creation ... ok
test validate::tests::test_validator_creation ... ok
test validate::tests::test_validate_workflow_with_actions ... ok
test validate::tests::test_validate_workflow_variable_detection_removed ... ok
test validate::tests::test_validate_only_loads_from_standard_locations ... ok
test prompt::tests::test_run_prompt_command_search ... ok
test signal_handler::tests::test_multiple_signal_handler_setup ... ok
test flow::tests::test_execute_workflow_test_mode_timeout ... ok
test signal_handler::tests::test_signal_handler_behavior ... ok
test search::tests::test_run_semantic_index_multiple_patterns ... ok
test search::tests::test_run_semantic_index_single_pattern ... ok
test doctor::tests::test_workflow_diagnostics_in_run_diagnostics ... ok
test doctor::checks::tests::test_claude_path_detection ... ok
test doctor::tests::test_run_diagnostics ... ok
test validate::tests::test_validate_all_handles_partial_templates ... ok

test result: ok. 149 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 2.05s

     Running unittests src/main.rs (target/debug/deps/swissarmyhammer-4dbcbebe962e0c97)

running 149 tests
test cli::tests::test_cli_no_subcommand ... ok
test cli::tests::test_cli_quiet_flag ... ok
test cli::tests::test_cli_serve_with_verbose ... ok
test cli::tests::test_cli_serve_subcommand ... ok
test cli::tests::test_cli_invalid_subcommand ... ok
test cli::tests::test_cli_doctor_subcommand ... ok
test cli::tests::test_cli_validate_command ... ok
test cli::tests::test_cli_test_subcommand_with_file ... ok
test cli::tests::test_cli_test_subcommand_with_all_flags ... ok
test cli::tests::test_cli_flow_test_subcommand ... ok
test cli::tests::test_cli_prompt_list_subcommand ... ok
test cli::tests::test_cli_test_subcommand_with_prompt_name ... ok
test cli::tests::test_cli_help_works ... ok
test cli::tests::test_cli_search_subcommand_basic ... ok
test cli::tests::test_cli_search_subcommand_with_flags ... ok
test cli::tests::test_cli_test_subcommand_with_set_variables ... ok
test cli::tests::test_cli_test_subcommand_with_arguments ... ok
test cli::tests::test_cli_validate_command_with_options ... ok
test cli::tests::test_cli_flow_test_subcommand_with_options ... ok
test cli::tests::test_cli_search_subcommand_with_fields ... ok
test cli::tests::test_cli_version_works ... ok
test cli::tests::test_cli_verbose_flag ... ok
test cli::tests::test_combined_flags ... ok
test cli::tests::test_debug_flag ... ok
test cli::tests::test_issue_create_with_name ... ok
test cli::tests::test_issue_create_named_with_file ... ok
test cli::tests::test_issue_create_without_name ... ok
test cli::tests::test_issue_create_with_file ... ok
test cli::tests::test_memo_context ... ok
test cli::tests::test_prompt_source_arg_conversions ... ok
test cli::tests::test_memo_create_basic ... ok
test cli::tests::test_prompt_source_arg_equality ... ok
test cli::tests::test_memo_create_with_content ... ok
test cli::tests::test_memo_list ... ok
test cli::tests::test_memo_get ... ok
test cli::tests::test_memo_delete ... ok
test cli::tests::test_parse_args_panics_on_error ... ok
test cli::tests::test_memo_search ... ok
test cli::tests::test_search_index_multiple_patterns ... ok
test cli::tests::test_memo_update ... ok
test cli::tests::test_search_index_single_pattern ... ok
test cli::tests::test_search_index_with_force_flag ... ok
test cli::tests::test_search_query_command ... ok
test doctor::tests::test_check_status_exit_codes ... ok
test doctor::tests::test_doctor_creation ... ok
test doctor::tests::test_exit_code_conversion ... ok
test doctor::types::tests::test_check_builder_minimal ... ok
test doctor::types::tests::test_check_builder_string_conversion ... ok
test doctor::types::tests::test_check_builder_with_fix ... ok
test doctor::types::tests::test_check_builder_with_message ... ok
test doctor::types::tests::test_check_status_equality ... ok
test doctor::checks::tests::test_claude_not_in_path ... ok
test doctor::types::tests::test_disk_space_display ... ok
_swissarmyhammer() {
    local i cur prev opts cmd
    COMPREPLY=()
    if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
        cur="$2"
    else
        cur="${COMP_WORDS[COMP_CWORD]}"
    fi
    prev="$3"
    cmd=""
    opts=""

    for i in "${COMP_WORDS[@]:0:COMP_CWORD}"
    do
        case "${cmd},${i}" in
            ",$1")
                cmd="swissarmyhammer"
                ;;
            swissarmyhammer,completion)
                cmd="swissarmyhammer__completion"
                ;;
            swissarmyhammer,doctor)
                cmd="swissarmyhammer__doctor"
                ;;
            swissarmyhammer,flow)
                cmd="swissarmyhammer__flow"
                ;;
            swissarmyhammer,help)
                cmd="swissarmyhammer__help"
                ;;
            swissarmyhammer,issue)
                cmd="swissarmyhammer__issue"
                ;;
            swissarmyhammer,memo)
                cmd="swissarmyhammer__memo"
                ;;
            swissarmyhammer,prompt)
                cmd="swissarmyhammer__prompt"
                ;;
            swissarmyhammer,search)
                cmd="swissarmyhammer__search"
                ;;
            swissarmyhammer,serve)
                cmd="swissarmyhammer__serve"
                ;;
            swissarmyhammer,validate)
                cmd="swissarmyhammer__validate"
                ;;
            swissarmyhammer__flow,help)
                cmd="swissarmyhammer__flow__help"
                ;;
            swissarmyhammer__flow,list)
                cmd="swissarmyhammer__flow__list"
                ;;
            swissarmyhammer__flow,logs)
                cmd="swissarmyhammer__flow__logs"
                ;;
            swissarmyhammer__flow,metrics)
                cmd="swissarmyhammer__flow__metrics"
                ;;
            swissarmyhammer__flow,resume)
                cmd="swissarmyhammer__flow__resume"
                ;;
            swissarmyhammer__flow,run)
                cmd="swissarmyhammer__flow__run"
                ;;
            swissarmyhammer__flow,status)
                cmd="swissarmyhammer__flow__status"
                ;;
            swissarmyhammer__flow,test)
                cmd="swissarmyhammer__flow__test"
                ;;
            swissarmyhammer__flow,visualize)
                cmd="swissarmyhammer__flow__visualize"
                ;;
            swissarmyhammer__flow__help,help)
                cmd="swissarmyhammer__flow__help__help"
                ;;
            swissarmyhammer__flow__help,list)
                cmd="swissarmyhammer__flow__help__list"
                ;;
            swissarmyhammer__flow__help,logs)
                cmd="swissarmyhammer__flow__help__logs"
                ;;
            swissarmyhammer__flow__help,metrics)
                cmd="swissarmyhammer__flow__help__metrics"
                ;;
            swissarmyhammer__flow__help,resume)
                cmd="swissarmyhammer__flow__help__resume"
                ;;
            swissarmyhammer__flow__help,run)
                cmd="swissarmyhammer__flow__help__run"
                ;;
            swissarmyhammer__flow__help,status)
                cmd="swissarmyhammer__flow__help__status"
                ;;
            swissarmyhammer__flow__help,test)
                cmd="swissarmyhammer__flow__help__test"
                ;;
            swissarmyhammer__flow__help,visualize)
                cmd="swissarmyhammer__flow__help__visualize"
                ;;
            swissarmyhammer__help,completion)
                cmd="swissarmyhammer__help__completion"
                ;;
            swissarmyhammer__help,doctor)
                cmd="swissarmyhammer__help__doctor"
                ;;
            swissarmyhammer__help,flow)
                cmd="swissarmyhammer__help__flow"
                ;;
            swissarmyhammer__help,help)
                cmd="swissarmyhammer__help__help"
                ;;
            swissarmyhammer__help,issue)
                cmd="swissarmyhammer__help__issue"
                ;;
            swissarmyhammer__help,memo)
                cmd="swissarmyhammer__help__memo"
                ;;
            swissarmyhammer__help,prompt)
                cmd="swissarmyhammer__help__prompt"
                ;;
            swissarmyhammer__help,search)
                cmd="swissarmyhammer__help__search"
                ;;
            swissarmyhammer__help,serve)
                cmd="swissarmyhammer__help__serve"
                ;;
            swissarmyhammer__help,validate)
                cmd="swissarmyhammer__help__validate"
                ;;
            swissarmyhammer__help__flow,list)
                cmd="swissarmyhammer__help__flow__list"
                ;;
            swissarmyhammer__help__flow,logs)
                cmd="swissarmyhammer__help__flow__logs"
                ;;
            swissarmyhammer__help__flow,metrics)
                cmd="swissarmyhammer__help__flow__metrics"
                ;;
            swissarmyhammer__help__flow,resume)
                cmd="swissarmyhammer__help__flow__resume"
                ;;
            swissarmyhammer__help__flow,run)
                cmd="swissarmyhammer__help__flow__run"
                ;;
            swissarmyhammer__help__flow,status)
                cmd="swissarmyhammer__help__flow__status"
                ;;
            swissarmyhammer__help__flow,test)
                cmd="swissarmyhammer__help__flow__test"
                ;;
            swissarmyhammer__help__flow,visualize)
                cmd="swissarmyhammer__help__flow__visualize"
                ;;
            swissarmyhammer__help__issue,complete)
                cmd="swissarmyhammer__help__issue__complete"
                ;;
            swissarmyhammer__help__issue,create)
                cmd="swissarmyhammer__help__issue__create"
                ;;
            swissarmyhammer__help__issue,current)
                cmd="swissarmyhammer__help__issue__current"
                ;;
            swissarmyhammer__help__issue,list)
                cmd="swissarmyhammer__help__issue__list"
                ;;
            swissarmyhammer__help__issue,merge)
                cmd="swissarmyhammer__help__issue__merge"
                ;;
            swissarmyhammer__help__issue,next)
                cmd="swissarmyhammer__help__issue__next"
                ;;
            swissarmyhammer__help__issue,show)
                cmd="swissarmyhammer__help__issue__show"
                ;;
            swissarmyhammer__help__issue,status)
                cmd="swissarmyhammer__help__issue__status"
                ;;
            swissarmyhammer__help__issue,update)
                cmd="swissarmyhammer__help__issue__update"
                ;;
            swissarmyhammer__help__issue,work)
                cmd="swissarmyhammer__help__issue__work"
                ;;
            swissarmyhammer__help__memo,context)
                cmd="swissarmyhammer__help__memo__context"
                ;;
            swissarmyhammer__help__memo,create)
                cmd="swissarmyhammer__help__memo__create"
                ;;
            swissarmyhammer__help__memo,delete)
                cmd="swissarmyhammer__help__memo__delete"
                ;;
            swissarmyhammer__help__memo,get)
                cmd="swissarmyhammer__help__memo__get"
                ;;
            swissarmyhammer__help__memo,list)
                cmd="swissarmyhammer__help__memo__list"
                ;;
            swissarmyhammer__help__memo,search)
                cmd="swissarmyhammer__help__memo__search"
                ;;
            swissarmyhammer__help__memo,update)
                cmd="swissarmyhammer__help__memo__update"
                ;;
            swissarmyhammer__help__prompt,list)
                cmd="swissarmyhammer__help__prompt__list"
                ;;
            swissarmyhammer__help__prompt,search)
                cmd="swissarmyhammer__help__prompt__search"
                ;;
            swissarmyhammer__help__prompt,test)
                cmd="swissarmyhammer__help__prompt__test"
                ;;
            swissarmyhammer__help__search,index)
                cmd="swissarmyhammer__help__search__index"
                ;;
            swissarmyhammer__help__search,query)
                cmd="swissarmyhammer__help__search__query"
                ;;
            swissarmyhammer__issue,complete)
                cmd="swissarmyhammer__issue__complete"
                ;;
            swissarmyhammer__issue,create)
                cmd="swissarmyhammer__issue__create"
                ;;
            swissarmyhammer__issue,current)
                cmd="swissarmyhammer__issue__current"
                ;;
            swissarmyhammer__issue,help)
                cmd="swissarmyhammer__issue__help"
                ;;
            swissarmyhammer__issue,list)
                cmd="swissarmyhammer__issue__list"
                ;;
            swissarmyhammer__issue,merge)
                cmd="swissarmyhammer__issue__merge"
                ;;
            swissarmyhammer__issue,next)
                cmd="swissarmyhammer__issue__next"
                ;;
            swissarmyhammer__issue,show)
                cmd="swissarmyhammer__issue__show"
                ;;
            swissarmyhammer__issue,status)
                cmd="swissarmyhammer__issue__status"
                ;;
            swissarmyhammer__issue,update)
                cmd="swissarmyhammer__issue__update"
                ;;
            swissarmyhammer__issue,work)
                cmd="swissarmyhammer__issue__work"
                ;;
            swissarmyhammer__issue__help,complete)
                cmd="swissarmyhammer__issue__help__complete"
                ;;
            swissarmyhammer__issue__help,create)
                cmd="swissarmyhammer__issue__help__create"
                ;;
            swissarmyhammer__issue__help,current)
                cmd="swissarmyhammer__issue__help__current"
                ;;
            swissarmyhammer__issue__help,help)
                cmd="swissarmyhammer__issue__help__help"
                ;;
            swissarmyhammer__issue__help,list)
                cmd="swissarmyhammer__issue__help__list"
                ;;
            swissarmyhammer__issue__help,merge)
                cmd="swissarmyhammer__issue__help__merge"
                ;;
            swissarmyhammer__issue__help,next)
                cmd="swissarmyhammer__issue__help__next"
                ;;
            swissarmyhammer__issue__help,show)
                cmd="swissarmyhammer__issue__help__show"
                ;;
            swissarmyhammer__issue__help,status)
                cmd="swissarmyhammer__issue__help__status"
                ;;
            swissarmyhammer__issue__help,update)
                cmd="swissarmyhammer__issue__help__update"
                ;;
            swissarmyhammer__issue__help,work)
                cmd="swissarmyhammer__issue__help__work"
                ;;
            swissarmyhammer__memo,context)
                cmd="swissarmyhammer__memo__context"
                ;;
            swissarmyhammer__memo,create)
                cmd="swissarmyhammer__memo__create"
                ;;
            swissarmyhammer__memo,delete)
                cmd="swissarmyhammer__memo__delete"
                ;;
            swissarmyhammer__memo,get)
                cmd="swissarmyhammer__memo__get"
                ;;
            swissarmyhammer__memo,help)
                cmd="swissarmyhammer__memo__help"
                ;;
            swissarmyhammer__memo,list)
                cmd="swissarmyhammer__memo__list"
                ;;
            swissarmyhammer__memo,search)
                cmd="swissarmyhammer__memo__search"
                ;;
            swissarmyhammer__memo,update)
                cmd="swissarmyhammer__memo__update"
                ;;
            swissarmyhammer__memo__help,context)
                cmd="swissarmyhammer__memo__help__context"
                ;;
            swissarmyhammer__memo__help,create)
                cmd="swissarmyhammer__memo__help__create"
                ;;
            swissarmyhammer__memo__help,delete)
                cmd="swissarmyhammer__memo__help__delete"
                ;;
            swissarmyhammer__memo__help,get)
                cmd="swissarmyhammer__memo__help__get"
                ;;
            swissarmyhammer__memo__help,help)
                cmd="swissarmyhammer__memo__help__help"
                ;;
            swissarmyhammer__memo__help,list)
                cmd="swissarmyhammer__memo__help__list"
                ;;
            swissarmyhammer__memo__help,search)
                cmd="swissarmyhammer__memo__help__search"
                ;;
            swissarmyhammer__memo__help,update)
                cmd="swissarmyhammer__memo__help__update"
                ;;
            swissarmyhammer__prompt,help)
                cmd="swissarmyhammer__prompt__help"
                ;;
            swissarmyhammer__prompt,list)
                cmd="swissarmyhammer__prompt__list"
                ;;
            swissarmyhammer__prompt,search)
                cmd="swissarmyhammer__prompt__search"
                ;;
            swissarmyhammer__prompt,test)
                cmd="swissarmyhammer__prompt__test"
                ;;
            swissarmyhammer__prompt__help,help)
                cmd="swissarmyhammer__prompt__help__help"
                ;;
            swissarmyhammer__prompt__help,list)
                cmd="swissarmyhammer__prompt__help__list"
                ;;
            swissarmyhammer__prompt__help,search)
                cmd="swissarmyhammer__prompt__help__search"
                ;;
            swissarmyhammer__prompt__help,test)
                cmd="swissarmyhammer__prompt__help__test"
                ;;
            swissarmyhammer__search,help)
                cmd="swissarmyhammer__search__help"
                ;;
            swissarmyhammer__search,index)
                cmd="swissarmyhammer__search__index"
                ;;
            swissarmyhammer__search,query)
                cmd="swissarmyhammer__search__query"
                ;;
            swissarmyhammer__search__help,help)
                cmd="swissarmyhammer__search__help__help"
                ;;
            swissarmyhammer__search__help,index)
                cmd="swissarmyhammer__search__help__index"
                ;;
            swissarmyhammer__search__help,query)
                cmd="swissarmyhammer__search__help__query"
                ;;
            *)
                ;;
        esac
    done

    case "${cmd}" in
        swissarmyhammer)
            opts="-v -d -q -h -V --verbose --debug --quiet --help --version serve doctor prompt flow completion validate issue memo search help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__completion)
            opts="-h --help bash elvish fish powershell zsh"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__doctor)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow)
            opts="-h --help run resume list status logs metrics visualize test help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help)
            opts="run resume list status logs metrics visualize test help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__logs)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__metrics)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__resume)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__run)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__status)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__test)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__help__visualize)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__list)
            opts="-v -h --format --verbose --source --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                --source)
                    COMPREPLY=($(compgen -W "builtin user local dynamic" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__logs)
            opts="-f -n -h --follow --tail --level --help <RUN_ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --tail)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -n)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --level)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__metrics)
            opts="-g -h --workflow --format --global --help [RUN_ID]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --workflow)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__resume)
            opts="-i -q -h --interactive --timeout --quiet --help <RUN_ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --timeout)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__run)
            opts="-i -q -h --var --set --interactive --dry-run --test --timeout --quiet --help <WORKFLOW>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --var)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --set)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --timeout)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__status)
            opts="-w -h --format --watch --help <RUN_ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__test)
            opts="-i -q -h --var --set --interactive --timeout --quiet --help <WORKFLOW>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --var)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --set)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --timeout)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__flow__visualize)
            opts="-o -h --format --output --timing --counts --path-only --help <RUN_ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "mermaid html json dot" -- "${cur}"))
                    return 0
                    ;;
                --output)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -o)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help)
            opts="serve doctor prompt flow completion validate issue memo search help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__completion)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__doctor)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow)
            opts="run resume list status logs metrics visualize test"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__logs)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__metrics)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__resume)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__run)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__status)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__test)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__flow__visualize)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue)
            opts="create list show update complete work merge current status next"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__complete)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__create)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__current)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__merge)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__next)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__show)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__status)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__update)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__issue__work)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo)
            opts="create list get update delete search context"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__context)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__create)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__delete)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__get)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__search)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__memo__update)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__prompt)
            opts="list test search"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__prompt__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__prompt__search)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__prompt__test)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__search)
            opts="index query"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__search__index)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__search__query)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__serve)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__help__validate)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue)
            opts="-h --help create list show update complete work merge current status next help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__complete)
            opts="-h --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__create)
            opts="-c -f -h --content --file --help [NAME]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --content)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --file)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__current)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help)
            opts="create list show update complete work merge current status next help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__complete)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__create)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__current)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__merge)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__next)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__show)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__status)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__update)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__help__work)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__list)
            opts="-c -a -f -h --completed --active --format --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__merge)
            opts="-k -h --keep-branch --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__next)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__show)
            opts="-r -h --raw --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__status)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__update)
            opts="-c -f -a -h --content --file --append --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --content)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --file)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__issue__work)
            opts="-h --help <NAME>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo)
            opts="-h --help create list get update delete search context help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__context)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__create)
            opts="-c -h --content --help <TITLE>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --content)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__delete)
            opts="-h --help <ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__get)
            opts="-h --help <ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help)
            opts="create list get update delete search context help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__context)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__create)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__delete)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__get)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__search)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__help__update)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__list)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__search)
            opts="-h --help <QUERY>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__memo__update)
            opts="-c -h --content --help <ID>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --content)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt)
            opts="-h --help list test search help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help)
            opts="list test search help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help__list)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help__search)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__help__test)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__list)
            opts="-v -h --format --verbose --source --category --search --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                --source)
                    COMPREPLY=($(compgen -W "builtin user local dynamic" -- "${cur}"))
                    return 0
                    ;;
                --category)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --search)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__search)
            opts="-r -f -l -h --in --regex --fuzzy --case-sensitive --source --has-arg --no-args --full --format --highlight --limit --help <QUERY>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --in)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --source)
                    COMPREPLY=($(compgen -W "builtin user local dynamic" -- "${cur}"))
                    return 0
                    ;;
                --has-arg)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                --limit)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -l)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__prompt__test)
            opts="-f -h --file --arg --set --raw --copy --save --debug --help [PROMPT_NAME]"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --file)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --arg)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --set)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --save)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search)
            opts="-h --help index query help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__help)
            opts="index query help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__help__help)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__help__index)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__help__query)
            opts=""
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 4 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__index)
            opts="-f -h --force --help [PATTERNS]..."
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__search__query)
            opts="-l -f -h --limit --format --help <QUERY>"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 3 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --limit)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                -l)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --format)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                -f)
                    COMPREPLY=($(compgen -W "table json yaml" -- "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__serve)
            opts="-h --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        swissarmyhammer__validate)
            opts="-q -h --quiet --format --workflow-dir --help"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                return 0
            fi
            case "${prev}" in
                --format)
                    COMPREPLY=($(compgen -W "text json" -- "${cur}"))
                    return 0
                    ;;
                --workflow-dir)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
    esac
}

if [[ "${BASH_VERSINFO[0]}" -eq 4 && "${BASH_VERSINFO[1]}" -ge 4 || "${BASH_VERSINFO[0]}" -gt 4 ]]; then
    complete -F _swissarmyhammer -o nosort -o bashdefault -o default swissarmyhammer
else
    complete -F _swissarmyhammer -o bashdefault -o default swissarmyhammer
fi
test doctor::types::tests::test_disk_space_from_mb ... ok
test doctor::types::tests::test_disk_space_is_low ... ok
test doctor::types::tests::test_disk_space_ordering ... ok
test doctor::types::tests::test_exit_code_conversion ... ok
test doctor::types::tests::test_exit_code_equality ... ok
test doctor::types::tests::test_workflow_category_display ... ok
test doctor::types::tests::test_workflow_category_equality ... ok
test doctor::types::tests::test_workflow_directory_as_ref ... ok
test doctor::types::tests::test_workflow_directory_display ... ok
test doctor::types::tests::test_workflow_directory_equality ... ok
test doctor::types::tests::test_workflow_directory_info_new ... ok
test completions::tests::test_completion_includes_subcommands ... ok
test doctor::types::tests::test_workflow_directory_new ... ok
test completions::tests::test_print_completion_bash ... ok
test completions::tests::test_completion_includes_flags ... ok
test completions::tests::test_print_completion_fish ... ok
test flow::tests::test_parse_duration ... ok
test list::tests::test_color_coding_when_terminal ... ok
#compdef swissarmyhammer

autoload -U is-at-least

_swissarmyhammer() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'-v[Enable verbose logging]' \
'--verbose[Enable verbose logging]' \
'-d[Enable debug logging]' \
'--debug[Enable debug logging]' \
'-q[Suppress all output except errors]' \
'--quiet[Suppress all output except errors]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_swissarmyhammer_commands" \
"*::: :->swissarmyhammer" \
&& ret=0
    case $state in
    (swissarmyhammer)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-command-$line[1]:"
        case $line[1] in
            (serve)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(doctor)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(prompt)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__prompt_commands" \
"*::: :->prompt" \
&& ret=0

    case $state in
    (prompt)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-prompt-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(table json yaml)' \
'--source=[Filter by source]:SOURCE:(builtin user local dynamic)' \
'--category=[Filter by category]:CATEGORY:_default' \
'--search=[Search prompts by name or description]:SEARCH:_default' \
'-v[Show verbose output including arguments]' \
'--verbose[Show verbose output including arguments]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
'-f+[Path to prompt file to test]:FILE:_default' \
'--file=[Path to prompt file to test]:FILE:_default' \
'*--arg=[Non-interactive mode\: specify arguments as key=value pairs]:KEY=VALUE:_default' \
'*--set=[Set template variables for liquid rendering as key=value pairs]:KEY=VALUE:_default' \
'--save=[Save rendered prompt to file]:FILE:_default' \
'--raw[Show raw output without formatting]' \
'--copy[Copy rendered prompt to clipboard]' \
'--debug[Show debug information (template, args, processing steps)]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'::prompt_name -- Prompt name to test (alternative to --file):_default' \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
'*--in=[Search in specific fields (name, title, description, content, arguments)]:IN:_default' \
'--source=[Filter by source]:SOURCE:(builtin user local dynamic)' \
'--has-arg=[Find prompts with specific argument name]:HAS_ARG:_default' \
'--format=[Output format]:FORMAT:(table json yaml)' \
'-l+[Maximum number of results to show]:LIMIT:_default' \
'--limit=[Maximum number of results to show]:LIMIT:_default' \
'-r[Use regular expressions]' \
'--regex[Use regular expressions]' \
'-f[Enable fuzzy matching for typo tolerance]' \
'--fuzzy[Enable fuzzy matching for typo tolerance]' \
'--case-sensitive[Case-sensitive search]' \
'--no-args[Find prompts without any arguments]' \
'--full[Show complete prompt details]' \
'--highlight[Highlight matching terms in output]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':query -- Search query:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__prompt__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-prompt-help-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(flow)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__flow_commands" \
"*::: :->flow" \
&& ret=0

    case $state in
    (flow)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-flow-command-$line[1]:"
        case $line[1] in
            (run)
_arguments "${_arguments_options[@]}" : \
'*--var=[Initial variables as key=value pairs]:KEY=VALUE:_default' \
'*--set=[Set template variables for liquid rendering in action strings as key=value pairs]:KEY=VALUE:_default' \
'--timeout=[Execution timeout (e.g., 30s, 5m, 1h)]:TIMEOUT:_default' \
'-i[Interactive mode - prompt at each state]' \
'--interactive[Interactive mode - prompt at each state]' \
'--dry-run[Dry run - show execution plan without running]' \
'--test[Test mode - execute with mocked actions and generate coverage report]' \
'-q[Quiet mode - only show errors]' \
'--quiet[Quiet mode - only show errors]' \
'-h[Print help]' \
'--help[Print help]' \
':workflow -- Workflow name to run:_default' \
&& ret=0
;;
(resume)
_arguments "${_arguments_options[@]}" : \
'--timeout=[Execution timeout (e.g., 30s, 5m, 1h)]:TIMEOUT:_default' \
'-i[Interactive mode - prompt at each state]' \
'--interactive[Interactive mode - prompt at each state]' \
'-q[Quiet mode - only show errors]' \
'--quiet[Quiet mode - only show errors]' \
'-h[Print help]' \
'--help[Print help]' \
':run_id -- Run ID to resume:_default' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(table json yaml)' \
'--source=[Filter by source]:SOURCE:(builtin user local dynamic)' \
'-v[Show verbose output including workflow details]' \
'--verbose[Show verbose output including workflow details]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(table json yaml)' \
'-w[Watch for status changes]' \
'--watch[Watch for status changes]' \
'-h[Print help]' \
'--help[Print help]' \
':run_id -- Run ID to check:_default' \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
'-n+[Number of log lines to show (from end)]:TAIL:_default' \
'--tail=[Number of log lines to show (from end)]:TAIL:_default' \
'--level=[Filter logs by level (info, warn, error)]:LEVEL:_default' \
'-f[Follow log output (like tail -f)]' \
'--follow[Follow log output (like tail -f)]' \
'-h[Print help]' \
'--help[Print help]' \
':run_id -- Run ID to view logs for:_default' \
&& ret=0
;;
(metrics)
_arguments "${_arguments_options[@]}" : \
'--workflow=[Workflow name to filter by]:WORKFLOW:_default' \
'--format=[Output format]:FORMAT:(table json yaml)' \
'-g[Show global metrics summary]' \
'--global[Show global metrics summary]' \
'-h[Print help]' \
'--help[Print help]' \
'::run_id -- Run ID to view metrics for (optional - shows all if not specified):_default' \
&& ret=0
;;
(visualize)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(mermaid html json dot)' \
'-o+[Output file path (optional - prints to stdout if not specified)]:OUTPUT:_default' \
'--output=[Output file path (optional - prints to stdout if not specified)]:OUTPUT:_default' \
'--timing[Include timing information]' \
'--counts[Include execution counts]' \
'--path-only[Show only executed path]' \
'-h[Print help]' \
'--help[Print help]' \
':run_id -- Run ID to visualize:_default' \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
'*--var=[Initial variables as key=value pairs]:KEY=VALUE:_default' \
'*--set=[Set template variables for liquid rendering in action strings as key=value pairs]:KEY=VALUE:_default' \
'--timeout=[Execution timeout (e.g., 30s, 5m, 1h)]:TIMEOUT:_default' \
'-i[Interactive mode - prompt at each state]' \
'--interactive[Interactive mode - prompt at each state]' \
'-q[Quiet mode - only show errors]' \
'--quiet[Quiet mode - only show errors]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':workflow -- Workflow name to test:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__flow__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-flow-help-command-$line[1]:"
        case $line[1] in
            (run)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(resume)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(metrics)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(visualize)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(completion)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':shell -- Shell to generate completion for:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(validate)
_arguments "${_arguments_options[@]}" : \
'--format=[Output format]:FORMAT:(text json)' \
'*--workflow-dir=[\\\[DEPRECATED\\\] This parameter is ignored. Workflows are now only loaded from standard locations]:DIR:_default' \
'-q[Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary]' \
'--quiet[Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
&& ret=0
;;
(issue)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__issue_commands" \
"*::: :->issue" \
&& ret=0

    case $state in
    (issue)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-issue-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
'-c+[Issue content (use - for stdin)]:CONTENT:_default' \
'--content=[Issue content (use - for stdin)]:CONTENT:_default' \
'-f+[Read content from file]:FILE:_files' \
'--file=[Read content from file]:FILE:_files' \
'-h[Print help]' \
'--help[Print help]' \
'::name -- Issue name (optional):_default' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'-f+[Output format (table, json, markdown)]:FORMAT:_default' \
'--format=[Output format (table, json, markdown)]:FORMAT:_default' \
'-c[Show completed issues]' \
'--completed[Show completed issues]' \
'-a[Show active issues only]' \
'--active[Show active issues only]' \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
'-r[Show raw content]' \
'--raw[Show raw content]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
'-c+[New content (use - for stdin)]:CONTENT:_default' \
'--content=[New content (use - for stdin)]:CONTENT:_default' \
'-f+[Read content from file]:FILE:_files' \
'--file=[Read content from file]:FILE:_files' \
'-a[Append to existing content]' \
'--append[Append to existing content]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(complete)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(work)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(merge)
_arguments "${_arguments_options[@]}" : \
'-k[Keep branch after merge]' \
'--keep-branch[Keep branch after merge]' \
'-h[Print help]' \
'--help[Print help]' \
':name -- Issue name:_default' \
&& ret=0
;;
(current)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(next)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__issue__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-issue-help-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(complete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(work)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(merge)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(current)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(next)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(memo)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__memo_commands" \
"*::: :->memo" \
&& ret=0

    case $state in
    (memo)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-memo-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
'-c+[Memo content (use - for stdin)]:CONTENT:_default' \
'--content=[Memo content (use - for stdin)]:CONTENT:_default' \
'-h[Print help]' \
'--help[Print help]' \
':title -- Memo title:_default' \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':id -- Memo ID (ULID):_default' \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
'-c+[New content (use - for stdin)]:CONTENT:_default' \
'--content=[New content (use - for stdin)]:CONTENT:_default' \
'-h[Print help]' \
'--help[Print help]' \
':id -- Memo ID (ULID):_default' \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':id -- Memo ID (ULID):_default' \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':query -- Search query:_default' \
&& ret=0
;;
(context)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__memo__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-memo-help-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(context)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(search)
_arguments "${_arguments_options[@]}" : \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
":: :_swissarmyhammer__search_commands" \
"*::: :->search" \
&& ret=0

    case $state in
    (search)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-search-command-$line[1]:"
        case $line[1] in
            (index)
_arguments "${_arguments_options[@]}" : \
'-f[Force re-indexing of all files]' \
'--force[Force re-indexing of all files]' \
'-h[Print help]' \
'--help[Print help]' \
'*::patterns -- Glob patterns or files to index (supports both "**/*.rs" and expanded file lists):_default' \
&& ret=0
;;
(query)
_arguments "${_arguments_options[@]}" : \
'-l+[Number of results to return]:LIMIT:_default' \
'--limit=[Number of results to return]:LIMIT:_default' \
'-f+[Output format]:FORMAT:(table json yaml)' \
'--format=[Output format]:FORMAT:(table json yaml)' \
'-h[Print help]' \
'--help[Print help]' \
':query -- Search query:_default' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__search__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-search-help-command-$line[1]:"
        case $line[1] in
            (index)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(query)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-command-$line[1]:"
        case $line[1] in
            (serve)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(doctor)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(prompt)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__prompt_commands" \
"*::: :->prompt" \
&& ret=0

    case $state in
    (prompt)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-prompt-command-$line[1]:"
        case $line[1] in
            (list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(flow)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__flow_commands" \
"*::: :->flow" \
&& ret=0

    case $state in
    (flow)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-flow-command-$line[1]:"
        case $line[1] in
            (run)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(resume)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(logs)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(metrics)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(visualize)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(completion)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(validate)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(issue)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__issue_commands" \
"*::: :->issue" \
&& ret=0

    case $state in
    (issue)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-issue-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(show)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(complete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(work)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(merge)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(current)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(status)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(next)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(memo)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__memo_commands" \
"*::: :->memo" \
&& ret=0

    case $state in
    (memo)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-memo-command-$line[1]:"
        case $line[1] in
            (create)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(list)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(get)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(update)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(delete)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(search)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(context)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(search)
_arguments "${_arguments_options[@]}" : \
":: :_swissarmyhammer__help__search_commands" \
"*::: :->search" \
&& ret=0

    case $state in
    (search)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:swissarmyhammer-help-search-command-$line[1]:"
        case $line[1] in
            (index)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(query)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_swissarmyhammer_commands] )) ||
_swissarmyhammer_commands() {
    local commands; commands=(
'serve:Run as MCP server (default when invoked via stdio)' \
'doctor:Diagnose configuration and setup issues' \
'prompt:Manage and test prompts' \
'flow:Execute and manage workflows' \
'completion:Generate shell completion scripts' \
'validate:Validate prompt files and workflows for syntax and best practices' \
'issue:Issue management commands' \
'memo:Memoranda (memo) management commands' \
'search:Semantic search commands' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer commands' commands "$@"
}
(( $+functions[_swissarmyhammer__completion_commands] )) ||
_swissarmyhammer__completion_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer completion commands' commands "$@"
}
(( $+functions[_swissarmyhammer__doctor_commands] )) ||
_swissarmyhammer__doctor_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer doctor commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow_commands] )) ||
_swissarmyhammer__flow_commands() {
    local commands; commands=(
'run:Run a workflow' \
'resume:Resume a paused workflow run' \
'list:List available workflows' \
'status:Check status of a workflow run' \
'logs:View logs for a workflow run' \
'metrics:View metrics for workflow runs' \
'visualize:Generate execution visualization' \
'test:Test a workflow without executing actions (simulates dry run)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer flow commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help_commands] )) ||
_swissarmyhammer__flow__help_commands() {
    local commands; commands=(
'run:Run a workflow' \
'resume:Resume a paused workflow run' \
'list:List available workflows' \
'status:Check status of a workflow run' \
'logs:View logs for a workflow run' \
'metrics:View metrics for workflow runs' \
'visualize:Generate execution visualization' \
'test:Test a workflow without executing actions (simulates dry run)' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer flow help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__help_commands] )) ||
_swissarmyhammer__flow__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__list_commands] )) ||
_swissarmyhammer__flow__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__logs_commands] )) ||
_swissarmyhammer__flow__help__logs_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help logs commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__metrics_commands] )) ||
_swissarmyhammer__flow__help__metrics_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help metrics commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__resume_commands] )) ||
_swissarmyhammer__flow__help__resume_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help resume commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__run_commands] )) ||
_swissarmyhammer__flow__help__run_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help run commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__status_commands] )) ||
_swissarmyhammer__flow__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__test_commands] )) ||
_swissarmyhammer__flow__help__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__help__visualize_commands] )) ||
_swissarmyhammer__flow__help__visualize_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow help visualize commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__list_commands] )) ||
_swissarmyhammer__flow__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__logs_commands] )) ||
_swissarmyhammer__flow__logs_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow logs commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__metrics_commands] )) ||
_swissarmyhammer__flow__metrics_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow metrics commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__resume_commands] )) ||
_swissarmyhammer__flow__resume_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow resume commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__run_commands] )) ||
_swissarmyhammer__flow__run_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow run commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__status_commands] )) ||
_swissarmyhammer__flow__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__test_commands] )) ||
_swissarmyhammer__flow__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__flow__visualize_commands] )) ||
_swissarmyhammer__flow__visualize_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer flow visualize commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help_commands] )) ||
_swissarmyhammer__help_commands() {
    local commands; commands=(
'serve:Run as MCP server (default when invoked via stdio)' \
'doctor:Diagnose configuration and setup issues' \
'prompt:Manage and test prompts' \
'flow:Execute and manage workflows' \
'completion:Generate shell completion scripts' \
'validate:Validate prompt files and workflows for syntax and best practices' \
'issue:Issue management commands' \
'memo:Memoranda (memo) management commands' \
'search:Semantic search commands' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__completion_commands] )) ||
_swissarmyhammer__help__completion_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help completion commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__doctor_commands] )) ||
_swissarmyhammer__help__doctor_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help doctor commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow_commands] )) ||
_swissarmyhammer__help__flow_commands() {
    local commands; commands=(
'run:Run a workflow' \
'resume:Resume a paused workflow run' \
'list:List available workflows' \
'status:Check status of a workflow run' \
'logs:View logs for a workflow run' \
'metrics:View metrics for workflow runs' \
'visualize:Generate execution visualization' \
'test:Test a workflow without executing actions (simulates dry run)' \
    )
    _describe -t commands 'swissarmyhammer help flow commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__list_commands] )) ||
_swissarmyhammer__help__flow__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__logs_commands] )) ||
_swissarmyhammer__help__flow__logs_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow logs commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__metrics_commands] )) ||
_swissarmyhammer__help__flow__metrics_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow metrics commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__resume_commands] )) ||
_swissarmyhammer__help__flow__resume_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow resume commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__run_commands] )) ||
_swissarmyhammer__help__flow__run_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow run commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__status_commands] )) ||
_swissarmyhammer__help__flow__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__test_commands] )) ||
_swissarmyhammer__help__flow__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__flow__visualize_commands] )) ||
_swissarmyhammer__help__flow__visualize_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help flow visualize commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__help_commands] )) ||
_swissarmyhammer__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue_commands] )) ||
_swissarmyhammer__help__issue_commands() {
    local commands; commands=(
'create:Create a new issue' \
'list:List all issues' \
'show:Show issue details' \
'update:Update an issue' \
'complete:Mark issue as complete' \
'work:Start working on an issue' \
'merge:Merge completed issue' \
'current:Show current issue' \
'status:Show project status' \
'next:Show the next issue to work on' \
    )
    _describe -t commands 'swissarmyhammer help issue commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__complete_commands] )) ||
_swissarmyhammer__help__issue__complete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue complete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__create_commands] )) ||
_swissarmyhammer__help__issue__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__current_commands] )) ||
_swissarmyhammer__help__issue__current_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue current commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__list_commands] )) ||
_swissarmyhammer__help__issue__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__merge_commands] )) ||
_swissarmyhammer__help__issue__merge_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue merge commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__next_commands] )) ||
_swissarmyhammer__help__issue__next_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue next commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__show_commands] )) ||
_swissarmyhammer__help__issue__show_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue show commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__status_commands] )) ||
_swissarmyhammer__help__issue__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__update_commands] )) ||
_swissarmyhammer__help__issue__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__issue__work_commands] )) ||
_swissarmyhammer__help__issue__work_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help issue work commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo_commands] )) ||
_swissarmyhammer__help__memo_commands() {
    local commands; commands=(
'create:Create a new memo' \
'list:List all memos' \
'get:Get a specific memo by ID' \
'update:Update a memo'\''s content' \
'delete:Delete a memo' \
'search:Search memos by content and title' \
'context:Get all memos as context for AI' \
    )
    _describe -t commands 'swissarmyhammer help memo commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__context_commands] )) ||
_swissarmyhammer__help__memo__context_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo context commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__create_commands] )) ||
_swissarmyhammer__help__memo__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__delete_commands] )) ||
_swissarmyhammer__help__memo__delete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo delete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__get_commands] )) ||
_swissarmyhammer__help__memo__get_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo get commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__list_commands] )) ||
_swissarmyhammer__help__memo__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__search_commands] )) ||
_swissarmyhammer__help__memo__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__memo__update_commands] )) ||
_swissarmyhammer__help__memo__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help memo update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__prompt_commands] )) ||
_swissarmyhammer__help__prompt_commands() {
    local commands; commands=(
'list:List all available prompts' \
'test:Test prompts interactively with sample arguments' \
'search:Search for prompts with advanced filtering and ranking' \
    )
    _describe -t commands 'swissarmyhammer help prompt commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__prompt__list_commands] )) ||
_swissarmyhammer__help__prompt__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help prompt list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__prompt__search_commands] )) ||
_swissarmyhammer__help__prompt__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help prompt search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__prompt__test_commands] )) ||
_swissarmyhammer__help__prompt__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help prompt test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__search_commands] )) ||
_swissarmyhammer__help__search_commands() {
    local commands; commands=(
'index:Index files for semantic search' \
'query:Query indexed files semantically' \
    )
    _describe -t commands 'swissarmyhammer help search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__search__index_commands] )) ||
_swissarmyhammer__help__search__index_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help search index commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__search__query_commands] )) ||
_swissarmyhammer__help__search__query_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help search query commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__serve_commands] )) ||
_swissarmyhammer__help__serve_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help serve commands' commands "$@"
}
(( $+functions[_swissarmyhammer__help__validate_commands] )) ||
_swissarmyhammer__help__validate_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer help validate commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue_commands] )) ||
_swissarmyhammer__issue_commands() {
    local commands; commands=(
'create:Create a new issue' \
'list:List all issues' \
'show:Show issue details' \
'update:Update an issue' \
'complete:Mark issue as complete' \
'work:Start working on an issue' \
'merge:Merge completed issue' \
'current:Show current issue' \
'status:Show project status' \
'next:Show the next issue to work on' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer issue commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__complete_commands] )) ||
_swissarmyhammer__issue__complete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue complete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__create_commands] )) ||
_swissarmyhammer__issue__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__current_commands] )) ||
_swissarmyhammer__issue__current_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue current commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help_commands] )) ||
_swissarmyhammer__issue__help_commands() {
    local commands; commands=(
'create:Create a new issue' \
'list:List all issues' \
'show:Show issue details' \
'update:Update an issue' \
'complete:Mark issue as complete' \
'work:Start working on an issue' \
'merge:Merge completed issue' \
'current:Show current issue' \
'status:Show project status' \
'next:Show the next issue to work on' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer issue help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__complete_commands] )) ||
_swissarmyhammer__issue__help__complete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help complete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__create_commands] )) ||
_swissarmyhammer__issue__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__current_commands] )) ||
_swissarmyhammer__issue__help__current_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help current commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__help_commands] )) ||
_swissarmyhammer__issue__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__list_commands] )) ||
_swissarmyhammer__issue__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__merge_commands] )) ||
_swissarmyhammer__issue__help__merge_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help merge commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__next_commands] )) ||
_swissarmyhammer__issue__help__next_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help next commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__show_commands] )) ||
_swissarmyhammer__issue__help__show_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help show commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__status_commands] )) ||
_swissarmyhammer__issue__help__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__update_commands] )) ||
_swissarmyhammer__issue__help__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__help__work_commands] )) ||
_swissarmyhammer__issue__help__work_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue help work commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__list_commands] )) ||
_swissarmyhammer__issue__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__merge_commands] )) ||
_swissarmyhammer__issue__merge_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue merge commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__next_commands] )) ||
_swissarmyhammer__issue__next_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue next commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__show_commands] )) ||
_swissarmyhammer__issue__show_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue show commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__status_commands] )) ||
_swissarmyhammer__issue__status_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue status commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__update_commands] )) ||
_swissarmyhammer__issue__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__issue__work_commands] )) ||
_swissarmyhammer__issue__work_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer issue work commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo_commands] )) ||
_swissarmyhammer__memo_commands() {
    local commands; commands=(
'create:Create a new memo' \
'list:List all memos' \
'get:Get a specific memo by ID' \
'update:Update a memo'\''s content' \
'delete:Delete a memo' \
'search:Search memos by content and title' \
'context:Get all memos as context for AI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer memo commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__context_commands] )) ||
_swissarmyhammer__memo__context_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo context commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__create_commands] )) ||
_swissarmyhammer__memo__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__delete_commands] )) ||
_swissarmyhammer__memo__delete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo delete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__get_commands] )) ||
_swissarmyhammer__memo__get_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo get commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help_commands] )) ||
_swissarmyhammer__memo__help_commands() {
    local commands; commands=(
'create:Create a new memo' \
'list:List all memos' \
'get:Get a specific memo by ID' \
'update:Update a memo'\''s content' \
'delete:Delete a memo' \
'search:Search memos by content and title' \
'context:Get all memos as context for AI' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer memo help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__context_commands] )) ||
_swissarmyhammer__memo__help__context_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help context commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__create_commands] )) ||
_swissarmyhammer__memo__help__create_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help create commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__delete_commands] )) ||
_swissarmyhammer__memo__help__delete_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help delete commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__get_commands] )) ||
_swissarmyhammer__memo__help__get_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help get commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__help_commands] )) ||
_swissarmyhammer__memo__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__list_commands] )) ||
_swissarmyhammer__memo__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__search_commands] )) ||
_swissarmyhammer__memo__help__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__help__update_commands] )) ||
_swissarmyhammer__memo__help__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo help update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__list_commands] )) ||
_swissarmyhammer__memo__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__search_commands] )) ||
_swissarmyhammer__memo__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__memo__update_commands] )) ||
_swissarmyhammer__memo__update_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer memo update commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt_commands] )) ||
_swissarmyhammer__prompt_commands() {
    local commands; commands=(
'list:List all available prompts' \
'test:Test prompts interactively with sample arguments' \
'search:Search for prompts with advanced filtering and ranking' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer prompt commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help_commands] )) ||
_swissarmyhammer__prompt__help_commands() {
    local commands; commands=(
'list:List all available prompts' \
'test:Test prompts interactively with sample arguments' \
'search:Search for prompts with advanced filtering and ranking' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer prompt help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help__help_commands] )) ||
_swissarmyhammer__prompt__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help__list_commands] )) ||
_swissarmyhammer__prompt__help__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt help list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help__search_commands] )) ||
_swissarmyhammer__prompt__help__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt help search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__help__test_commands] )) ||
_swissarmyhammer__prompt__help__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt help test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__list_commands] )) ||
_swissarmyhammer__prompt__list_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt list commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__search_commands] )) ||
_swissarmyhammer__prompt__search_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__prompt__test_commands] )) ||
_swissarmyhammer__prompt__test_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer prompt test commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search_commands] )) ||
_swissarmyhammer__search_commands() {
    local commands; commands=(
'index:Index files for semantic search' \
'query:Query indexed files semantically' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer search commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__help_commands] )) ||
_swissarmyhammer__search__help_commands() {
    local commands; commands=(
'index:Index files for semantic search' \
'query:Query indexed files semantically' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'swissarmyhammer search help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__help__help_commands] )) ||
_swissarmyhammer__search__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search help help commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__help__index_commands] )) ||
_swissarmyhammer__search__help__index_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search help index commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__help__query_commands] )) ||
_swissarmyhammer__search__help__query_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search help query commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__index_commands] )) ||
_swissarmyhammer__search__index_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search index commands' commands "$@"
}
(( $+functions[_swissarmyhammer__search__query_commands] )) ||
_swissarmyhammer__search__query_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer search query commands' commands "$@"
}
(( $+functions[_swissarmyhammer__serve_commands] )) ||
_swissarmyhammer__serve_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer serve commands' commands "$@"
}
(( $+functions[_swissarmyhammer__validate_commands] )) ||
_swissarmyhammer__validate_commands() {
    local commands; commands=()
    _describe -t commands 'swissarmyhammer validate commands' commands "$@"
}

if [ "$funcstack[1]" = "_swissarmyhammer" ]; then
    _swissarmyhammer "$@"
else
    compdef _swissarmyhammer swissarmyhammer
fi
test flow::tests::test_workflow_run_id_parse_error ... ok
# Print an optspec for argparse to handle cmd's options that are independent of any subcommand.
function __fish_swissarmyhammer_global_optspecs
	string join \n v/verbose d/debug q/quiet h/help V/version
end

function __fish_swissarmyhammer_needs_command
	# Figure out if the current invocation already has a command.
	set -l cmd (commandline -opc)
	set -e cmd[1]
	argparse -s (__fish_swissarmyhammer_global_optspecs) -- $cmd 2>/dev/null
	or return
	if set -q argv[1]
		# Also print the command, so this can be used to figure out what it is.
		echo $argv[1]
		return 1
	end
	return 0
end

function __fish_swissarmyhammer_using_subcommand
	set -l cmd (__fish_swissarmyhammer_needs_command)
	test -z "$cmd"
	and return 1
	contains -- $cmd[1] $argv
end

test completions::tests::test_print_completion_zsh ... ok
test flow::tests::test_workflow_run_id_helpers ... ok
test flow::tests::test_parse_set_variables ... ok
test flow::tests::test_execute_workflow_test_mode_empty_workflow ... ok
test flow::tests::test_execute_workflow_test_mode_with_conditions ... ok
test flow::tests::test_execute_workflow_test_mode_no_transitions ... ok
test list::tests::test_prompt_info_creation ... ok
test flow::tests::test_execute_workflow_test_mode_simple_workflow ... ok
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s v -l verbose -d 'Enable verbose logging'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s d -l debug -d 'Enable debug logging'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s q -l quiet -d 'Suppress all output except errors'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -s V -l version -d 'Print version'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "serve" -d 'Run as MCP server (default when invoked via stdio)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "doctor" -d 'Diagnose configuration and setup issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "prompt" -d 'Manage and test prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "flow" -d 'Execute and manage workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "completion" -d 'Generate shell completion scripts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "validate" -d 'Validate prompt files and workflows for syntax and best practices'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "issue" -d 'Issue management commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "memo" -d 'Memoranda (memo) management commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "search" -d 'Semantic search commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_needs_command" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand serve" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand doctor" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -f -a "list" -d 'List all available prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -f -a "test" -d 'Test prompts interactively with sample arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -f -a "search" -d 'Search for prompts with advanced filtering and ranking'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and not __fish_seen_subcommand_from list test search help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -l source -d 'Filter by source' -r -f -a "builtin\t''
user\t''
local\t''
dynamic\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -l category -d 'Filter by category' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -l search -d 'Search prompts by name or description' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Show verbose output including arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -s f -l file -d 'Path to prompt file to test' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l arg -d 'Non-interactive mode: specify arguments as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l set -d 'Set template variables for liquid rendering as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l save -d 'Save rendered prompt to file' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l raw -d 'Show raw output without formatting'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l copy -d 'Copy rendered prompt to clipboard'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -l debug -d 'Show debug information (template, args, processing steps)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from test" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l in -d 'Search in specific fields (name, title, description, content, arguments)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l source -d 'Filter by source' -r -f -a "builtin\t''
user\t''
local\t''
dynamic\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l has-arg -d 'Find prompts with specific argument name' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -s l -l limit -d 'Maximum number of results to show' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -s r -l regex -d 'Use regular expressions'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -s f -l fuzzy -d 'Enable fuzzy matching for typo tolerance'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l case-sensitive -d 'Case-sensitive search'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l no-args -d 'Find prompts without any arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l full -d 'Show complete prompt details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -l highlight -d 'Highlight matching terms in output'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from search" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all available prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from help" -f -a "test" -d 'Test prompts interactively with sample arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from help" -f -a "search" -d 'Search for prompts with advanced filtering and ranking'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand prompt; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "run" -d 'Run a workflow'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "resume" -d 'Resume a paused workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "list" -d 'List available workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "status" -d 'Check status of a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "logs" -d 'View logs for a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "metrics" -d 'View metrics for workflow runs'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "visualize" -d 'Generate execution visualization'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "test" -d 'Test a workflow without executing actions (simulates dry run)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and not __fish_seen_subcommand_from run resume list status logs metrics visualize test help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l var -d 'Initial variables as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l set -d 'Set template variables for liquid rendering in action strings as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l timeout -d 'Execution timeout (e.g., 30s, 5m, 1h)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -s i -l interactive -d 'Interactive mode - prompt at each state'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l dry-run -d 'Dry run - show execution plan without running'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -l test -d 'Test mode - execute with mocked actions and generate coverage report'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -s q -l quiet -d 'Quiet mode - only show errors'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from run" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from resume" -l timeout -d 'Execution timeout (e.g., 30s, 5m, 1h)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from resume" -s i -l interactive -d 'Interactive mode - prompt at each state'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from resume" -s q -l quiet -d 'Quiet mode - only show errors'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from resume" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from list" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from list" -l source -d 'Filter by source' -r -f -a "builtin\t''
user\t''
local\t''
dynamic\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from list" -s v -l verbose -d 'Show verbose output including workflow details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from status" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from status" -s w -l watch -d 'Watch for status changes'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from status" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from logs" -s n -l tail -d 'Number of log lines to show (from end)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from logs" -l level -d 'Filter logs by level (info, warn, error)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from logs" -s f -l follow -d 'Follow log output (like tail -f)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from logs" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from metrics" -l workflow -d 'Workflow name to filter by' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from metrics" -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from metrics" -s g -l global -d 'Show global metrics summary'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from metrics" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -l format -d 'Output format' -r -f -a "mermaid\t''
html\t''
json\t''
dot\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -s o -l output -d 'Output file path (optional - prints to stdout if not specified)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -l timing -d 'Include timing information'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -l counts -d 'Include execution counts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -l path-only -d 'Show only executed path'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from visualize" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -l var -d 'Initial variables as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -l set -d 'Set template variables for liquid rendering in action strings as key=value pairs' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -l timeout -d 'Execution timeout (e.g., 30s, 5m, 1h)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -s i -l interactive -d 'Interactive mode - prompt at each state'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -s q -l quiet -d 'Quiet mode - only show errors'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from test" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "run" -d 'Run a workflow'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "resume" -d 'Resume a paused workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "list" -d 'List available workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "status" -d 'Check status of a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "logs" -d 'View logs for a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "metrics" -d 'View metrics for workflow runs'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "visualize" -d 'Generate execution visualization'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "test" -d 'Test a workflow without executing actions (simulates dry run)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand flow; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand completion" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand validate" -l format -d 'Output format' -r -f -a "text\t''
json\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand validate" -l workflow-dir -d '\\[DEPRECATED\\] This parameter is ignored. Workflows are now only loaded from standard locations' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand validate" -s q -l quiet -d 'Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand validate" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "create" -d 'Create a new issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "list" -d 'List all issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "show" -d 'Show issue details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "update" -d 'Update an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "complete" -d 'Mark issue as complete'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "work" -d 'Start working on an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "merge" -d 'Merge completed issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "current" -d 'Show current issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "status" -d 'Show project status'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "next" -d 'Show the next issue to work on'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and not __fish_seen_subcommand_from create list show update complete work merge current status next help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from create" -s c -l content -d 'Issue content (use - for stdin)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from create" -s f -l file -d 'Read content from file' -r -F
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from create" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from list" -s f -l format -d 'Output format (table, json, markdown)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from list" -s c -l completed -d 'Show completed issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from list" -s a -l active -d 'Show active issues only'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from show" -s r -l raw -d 'Show raw content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from show" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from update" -s c -l content -d 'New content (use - for stdin)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from update" -s f -l file -d 'Read content from file' -r -F
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from update" -s a -l append -d 'Append to existing content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from update" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from complete" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from work" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from merge" -s k -l keep-branch -d 'Keep branch after merge'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from merge" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from current" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from status" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from next" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "create" -d 'Create a new issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "show" -d 'Show issue details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "update" -d 'Update an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "complete" -d 'Mark issue as complete'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "work" -d 'Start working on an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "merge" -d 'Merge completed issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "current" -d 'Show current issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "status" -d 'Show project status'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "next" -d 'Show the next issue to work on'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand issue; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "create" -d 'Create a new memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "list" -d 'List all memos'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "get" -d 'Get a specific memo by ID'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "update" -d 'Update a memo\'s content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "delete" -d 'Delete a memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "search" -d 'Search memos by content and title'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "context" -d 'Get all memos as context for AI'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and not __fish_seen_subcommand_from create list get update delete search context help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from create" -s c -l content -d 'Memo content (use - for stdin)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from create" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from list" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from get" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from update" -s c -l content -d 'New content (use - for stdin)' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from update" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from delete" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from search" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from context" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "create" -d 'Create a new memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "list" -d 'List all memos'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "get" -d 'Get a specific memo by ID'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "update" -d 'Update a memo\'s content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "delete" -d 'Delete a memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "search" -d 'Search memos by content and title'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "context" -d 'Get all memos as context for AI'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand memo; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and not __fish_seen_subcommand_from index query help" -s h -l help -d 'Print help (see more with \'--help\')'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and not __fish_seen_subcommand_from index query help" -f -a "index" -d 'Index files for semantic search'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and not __fish_seen_subcommand_from index query help" -f -a "query" -d 'Query indexed files semantically'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and not __fish_seen_subcommand_from index query help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from index" -s f -l force -d 'Force re-indexing of all files'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from index" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from query" -s l -l limit -d 'Number of results to return' -r
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from query" -s f -l format -d 'Output format' -r -f -a "table\t''
json\t''
yaml\t''"
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from query" -s h -l help -d 'Print help'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from help" -f -a "index" -d 'Index files for semantic search'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from help" -f -a "query" -d 'Query indexed files semantically'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand search; and __fish_seen_subcommand_from help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "serve" -d 'Run as MCP server (default when invoked via stdio)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "doctor" -d 'Diagnose configuration and setup issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "prompt" -d 'Manage and test prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "flow" -d 'Execute and manage workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "completion" -d 'Generate shell completion scripts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "validate" -d 'Validate prompt files and workflows for syntax and best practices'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "issue" -d 'Issue management commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "memo" -d 'Memoranda (memo) management commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "search" -d 'Semantic search commands'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and not __fish_seen_subcommand_from serve doctor prompt flow completion validate issue memo search help" -f -a "help" -d 'Print this message or the help of the given subcommand(s)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from prompt" -f -a "list" -d 'List all available prompts'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from prompt" -f -a "test" -d 'Test prompts interactively with sample arguments'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from prompt" -f -a "search" -d 'Search for prompts with advanced filtering and ranking'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "run" -d 'Run a workflow'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "resume" -d 'Resume a paused workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "list" -d 'List available workflows'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "status" -d 'Check status of a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "logs" -d 'View logs for a workflow run'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "metrics" -d 'View metrics for workflow runs'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "visualize" -d 'Generate execution visualization'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from flow" -f -a "test" -d 'Test a workflow without executing actions (simulates dry run)'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "create" -d 'Create a new issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "list" -d 'List all issues'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "show" -d 'Show issue details'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "update" -d 'Update an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "complete" -d 'Mark issue as complete'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "work" -d 'Start working on an issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "merge" -d 'Merge completed issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "current" -d 'Show current issue'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "status" -d 'Show project status'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from issue" -f -a "next" -d 'Show the next issue to work on'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "create" -d 'Create a new memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "list" -d 'List all memos'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "get" -d 'Get a specific memo by ID'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "update" -d 'Update a memo\'s content'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "delete" -d 'Delete a memo'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "search" -d 'Search memos by content and title'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from memo" -f -a "context" -d 'Get all memos as context for AI'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from search" -f -a "index" -d 'Index files for semantic search'
complete -c swissarmyhammer -n "__fish_swissarmyhammer_using_subcommand help; and __fish_seen_subcommand_from search" -f -a "query" -d 'Query indexed files semantically'
test flow::tests::test_execute_workflow_test_mode_with_variables ... ok
test flow::tests::test_set_variables_in_context ... ok
test list::tests::test_title_extraction_logic ... ok
test mcp_integration::tests::test_create_arguments ... ok
test mcp_integration::tests::test_rate_limiter_creation ... ok
test mcp_integration::tests::test_response_formatting ... ok
test search::tests::test_file_line_format ... ok
test search::tests::test_generate_excerpt ... ok
test search::tests::test_generate_excerpt_with_long_text ... ok
test search::tests::test_run_semantic_index_empty_patterns ... ok
test search::tests::test_search_result_creation ... ok

using namespace System.Management.Automation
using namespace System.Management.Automation.Language

Register-ArgumentCompleter -Native -CommandName 'swissarmyhammer' -ScriptBlock {
    param($wordToComplete, $commandAst, $cursorPosition)

    $commandElements = $commandAst.CommandElements
    $command = @(
        'swissarmyhammer'
        for ($i = 1; $i -lt $commandElements.Count; $i++) {
            $element = $commandElements[$i]
            if ($element -isnot [StringConstantExpressionAst] -or
                $element.StringConstantType -ne [StringConstantType]::BareWord -or
                $element.Value.StartsWith('-') -or
                $element.Value -eq $wordToComplete) {
                break
        }
        $element.Value
    }) -join ';'

    $completions = @(switch ($command) {
        'swissarmyhammer' {
            [CompletionResult]::new('-v', '-v', [CompletionResultType]::ParameterName, 'Enable verbose logging')
            [CompletionResult]::new('--verbose', '--verbose', [CompletionResultType]::ParameterName, 'Enable verbose logging')
            [CompletionResult]::new('-d', '-d', [CompletionResultType]::ParameterName, 'Enable debug logging')
            [CompletionResult]::new('--debug', '--debug', [CompletionResultType]::ParameterName, 'Enable debug logging')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Suppress all output except errors')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Suppress all output except errors')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('-V', '-V ', [CompletionResultType]::ParameterName, 'Print version')
            [CompletionResult]::new('--version', '--version', [CompletionResultType]::ParameterName, 'Print version')
            [CompletionResult]::new('serve', 'serve', [CompletionResultType]::ParameterValue, 'Run as MCP server (default when invoked via stdio)')
            [CompletionResult]::new('doctor', 'doctor', [CompletionResultType]::ParameterValue, 'Diagnose configuration and setup issues')
            [CompletionResult]::new('prompt', 'prompt', [CompletionResultType]::ParameterValue, 'Manage and test prompts')
            [CompletionResult]::new('flow', 'flow', [CompletionResultType]::ParameterValue, 'Execute and manage workflows')
            [CompletionResult]::new('completion', 'completion', [CompletionResultType]::ParameterValue, 'Generate shell completion scripts')
            [CompletionResult]::new('validate', 'validate', [CompletionResultType]::ParameterValue, 'Validate prompt files and workflows for syntax and best practices')
            [CompletionResult]::new('issue', 'issue', [CompletionResultType]::ParameterValue, 'Issue management commands')
            [CompletionResult]::new('memo', 'memo', [CompletionResultType]::ParameterValue, 'Memoranda (memo) management commands')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Semantic search commands')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;serve' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;doctor' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;prompt' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all available prompts')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test prompts interactively with sample arguments')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search for prompts with advanced filtering and ranking')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;prompt;list' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('--source', '--source', [CompletionResultType]::ParameterName, 'Filter by source')
            [CompletionResult]::new('--category', '--category', [CompletionResultType]::ParameterName, 'Filter by category')
            [CompletionResult]::new('--search', '--search', [CompletionResultType]::ParameterName, 'Search prompts by name or description')
            [CompletionResult]::new('-v', '-v', [CompletionResultType]::ParameterName, 'Show verbose output including arguments')
            [CompletionResult]::new('--verbose', '--verbose', [CompletionResultType]::ParameterName, 'Show verbose output including arguments')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;prompt;test' {
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Path to prompt file to test')
            [CompletionResult]::new('--file', '--file', [CompletionResultType]::ParameterName, 'Path to prompt file to test')
            [CompletionResult]::new('--arg', '--arg', [CompletionResultType]::ParameterName, 'Non-interactive mode: specify arguments as key=value pairs')
            [CompletionResult]::new('--set', '--set', [CompletionResultType]::ParameterName, 'Set template variables for liquid rendering as key=value pairs')
            [CompletionResult]::new('--save', '--save', [CompletionResultType]::ParameterName, 'Save rendered prompt to file')
            [CompletionResult]::new('--raw', '--raw', [CompletionResultType]::ParameterName, 'Show raw output without formatting')
            [CompletionResult]::new('--copy', '--copy', [CompletionResultType]::ParameterName, 'Copy rendered prompt to clipboard')
            [CompletionResult]::new('--debug', '--debug', [CompletionResultType]::ParameterName, 'Show debug information (template, args, processing steps)')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;prompt;search' {
            [CompletionResult]::new('--in', '--in', [CompletionResultType]::ParameterName, 'Search in specific fields (name, title, description, content, arguments)')
            [CompletionResult]::new('--source', '--source', [CompletionResultType]::ParameterName, 'Filter by source')
            [CompletionResult]::new('--has-arg', '--has-arg', [CompletionResultType]::ParameterName, 'Find prompts with specific argument name')
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-l', '-l', [CompletionResultType]::ParameterName, 'Maximum number of results to show')
            [CompletionResult]::new('--limit', '--limit', [CompletionResultType]::ParameterName, 'Maximum number of results to show')
            [CompletionResult]::new('-r', '-r', [CompletionResultType]::ParameterName, 'Use regular expressions')
            [CompletionResult]::new('--regex', '--regex', [CompletionResultType]::ParameterName, 'Use regular expressions')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Enable fuzzy matching for typo tolerance')
            [CompletionResult]::new('--fuzzy', '--fuzzy', [CompletionResultType]::ParameterName, 'Enable fuzzy matching for typo tolerance')
            [CompletionResult]::new('--case-sensitive', '--case-sensitive', [CompletionResultType]::ParameterName, 'Case-sensitive search')
            [CompletionResult]::new('--no-args', '--no-args', [CompletionResultType]::ParameterName, 'Find prompts without any arguments')
            [CompletionResult]::new('--full', '--full', [CompletionResultType]::ParameterName, 'Show complete prompt details')
            [CompletionResult]::new('--highlight', '--highlight', [CompletionResultType]::ParameterName, 'Highlight matching terms in output')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;prompt;help' {
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all available prompts')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test prompts interactively with sample arguments')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search for prompts with advanced filtering and ranking')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;prompt;help;list' {
            break
        }
        'swissarmyhammer;prompt;help;test' {
            break
        }
        'swissarmyhammer;prompt;help;search' {
            break
        }
        'swissarmyhammer;prompt;help;help' {
            break
        }
        'swissarmyhammer;flow' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('run', 'run', [CompletionResultType]::ParameterValue, 'Run a workflow')
            [CompletionResult]::new('resume', 'resume', [CompletionResultType]::ParameterValue, 'Resume a paused workflow run')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List available workflows')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Check status of a workflow run')
            [CompletionResult]::new('logs', 'logs', [CompletionResultType]::ParameterValue, 'View logs for a workflow run')
            [CompletionResult]::new('metrics', 'metrics', [CompletionResultType]::ParameterValue, 'View metrics for workflow runs')
            [CompletionResult]::new('visualize', 'visualize', [CompletionResultType]::ParameterValue, 'Generate execution visualization')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test a workflow without executing actions (simulates dry run)')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;flow;run' {
            [CompletionResult]::new('--var', '--var', [CompletionResultType]::ParameterName, 'Initial variables as key=value pairs')
            [CompletionResult]::new('--set', '--set', [CompletionResultType]::ParameterName, 'Set template variables for liquid rendering in action strings as key=value pairs')
            [CompletionResult]::new('--timeout', '--timeout', [CompletionResultType]::ParameterName, 'Execution timeout (e.g., 30s, 5m, 1h)')
            [CompletionResult]::new('-i', '-i', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('--interactive', '--interactive', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('--dry-run', '--dry-run', [CompletionResultType]::ParameterName, 'Dry run - show execution plan without running')
            [CompletionResult]::new('--test', '--test', [CompletionResultType]::ParameterName, 'Test mode - execute with mocked actions and generate coverage report')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;resume' {
            [CompletionResult]::new('--timeout', '--timeout', [CompletionResultType]::ParameterName, 'Execution timeout (e.g., 30s, 5m, 1h)')
            [CompletionResult]::new('-i', '-i', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('--interactive', '--interactive', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;list' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('--source', '--source', [CompletionResultType]::ParameterName, 'Filter by source')
            [CompletionResult]::new('-v', '-v', [CompletionResultType]::ParameterName, 'Show verbose output including workflow details')
            [CompletionResult]::new('--verbose', '--verbose', [CompletionResultType]::ParameterName, 'Show verbose output including workflow details')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;status' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-w', '-w', [CompletionResultType]::ParameterName, 'Watch for status changes')
            [CompletionResult]::new('--watch', '--watch', [CompletionResultType]::ParameterName, 'Watch for status changes')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;logs' {
            [CompletionResult]::new('-n', '-n', [CompletionResultType]::ParameterName, 'Number of log lines to show (from end)')
            [CompletionResult]::new('--tail', '--tail', [CompletionResultType]::ParameterName, 'Number of log lines to show (from end)')
            [CompletionResult]::new('--level', '--level', [CompletionResultType]::ParameterName, 'Filter logs by level (info, warn, error)')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Follow log output (like tail -f)')
            [CompletionResult]::new('--follow', '--follow', [CompletionResultType]::ParameterName, 'Follow log output (like tail -f)')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;metrics' {
            [CompletionResult]::new('--workflow', '--workflow', [CompletionResultType]::ParameterName, 'Workflow name to filter by')
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-g', '-g', [CompletionResultType]::ParameterName, 'Show global metrics summary')
            [CompletionResult]::new('--global', '--global', [CompletionResultType]::ParameterName, 'Show global metrics summary')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;visualize' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-o', '-o', [CompletionResultType]::ParameterName, 'Output file path (optional - prints to stdout if not specified)')
            [CompletionResult]::new('--output', '--output', [CompletionResultType]::ParameterName, 'Output file path (optional - prints to stdout if not specified)')
            [CompletionResult]::new('--timing', '--timing', [CompletionResultType]::ParameterName, 'Include timing information')
            [CompletionResult]::new('--counts', '--counts', [CompletionResultType]::ParameterName, 'Include execution counts')
            [CompletionResult]::new('--path-only', '--path-only', [CompletionResultType]::ParameterName, 'Show only executed path')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;flow;test' {
            [CompletionResult]::new('--var', '--var', [CompletionResultType]::ParameterName, 'Initial variables as key=value pairs')
            [CompletionResult]::new('--set', '--set', [CompletionResultType]::ParameterName, 'Set template variables for liquid rendering in action strings as key=value pairs')
            [CompletionResult]::new('--timeout', '--timeout', [CompletionResultType]::ParameterName, 'Execution timeout (e.g., 30s, 5m, 1h)')
            [CompletionResult]::new('-i', '-i', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('--interactive', '--interactive', [CompletionResultType]::ParameterName, 'Interactive mode - prompt at each state')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Quiet mode - only show errors')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;flow;help' {
            [CompletionResult]::new('run', 'run', [CompletionResultType]::ParameterValue, 'Run a workflow')
            [CompletionResult]::new('resume', 'resume', [CompletionResultType]::ParameterValue, 'Resume a paused workflow run')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List available workflows')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Check status of a workflow run')
            [CompletionResult]::new('logs', 'logs', [CompletionResultType]::ParameterValue, 'View logs for a workflow run')
            [CompletionResult]::new('metrics', 'metrics', [CompletionResultType]::ParameterValue, 'View metrics for workflow runs')
            [CompletionResult]::new('visualize', 'visualize', [CompletionResultType]::ParameterValue, 'Generate execution visualization')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test a workflow without executing actions (simulates dry run)')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;flow;help;run' {
            break
        }
        'swissarmyhammer;flow;help;resume' {
            break
        }
        'swissarmyhammer;flow;help;list' {
            break
        }
        'swissarmyhammer;flow;help;status' {
            break
        }
        'swissarmyhammer;flow;help;logs' {
            break
        }
        'swissarmyhammer;flow;help;metrics' {
            break
        }
        'swissarmyhammer;flow;help;visualize' {
            break
        }
        'swissarmyhammer;flow;help;test' {
            break
        }
        'swissarmyhammer;flow;help;help' {
            break
        }
        'swissarmyhammer;completion' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;validate' {
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('--workflow-dir', '--workflow-dir', [CompletionResultType]::ParameterName, '\[DEPRECATED\] This parameter is ignored. Workflows are now only loaded from standard locations')
            [CompletionResult]::new('-q', '-q', [CompletionResultType]::ParameterName, 'Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary')
            [CompletionResult]::new('--quiet', '--quiet', [CompletionResultType]::ParameterName, 'Suppress all output except errors. In quiet mode, warnings are hidden from both output and summary')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            break
        }
        'swissarmyhammer;issue' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new issue')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all issues')
            [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterValue, 'Show issue details')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update an issue')
            [CompletionResult]::new('complete', 'complete', [CompletionResultType]::ParameterValue, 'Mark issue as complete')
            [CompletionResult]::new('work', 'work', [CompletionResultType]::ParameterValue, 'Start working on an issue')
            [CompletionResult]::new('merge', 'merge', [CompletionResultType]::ParameterValue, 'Merge completed issue')
            [CompletionResult]::new('current', 'current', [CompletionResultType]::ParameterValue, 'Show current issue')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Show project status')
            [CompletionResult]::new('next', 'next', [CompletionResultType]::ParameterValue, 'Show the next issue to work on')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;issue;create' {
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'Issue content (use - for stdin)')
            [CompletionResult]::new('--content', '--content', [CompletionResultType]::ParameterName, 'Issue content (use - for stdin)')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Read content from file')
            [CompletionResult]::new('--file', '--file', [CompletionResultType]::ParameterName, 'Read content from file')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;list' {
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Output format (table, json, markdown)')
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format (table, json, markdown)')
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'Show completed issues')
            [CompletionResult]::new('--completed', '--completed', [CompletionResultType]::ParameterName, 'Show completed issues')
            [CompletionResult]::new('-a', '-a', [CompletionResultType]::ParameterName, 'Show active issues only')
            [CompletionResult]::new('--active', '--active', [CompletionResultType]::ParameterName, 'Show active issues only')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;show' {
            [CompletionResult]::new('-r', '-r', [CompletionResultType]::ParameterName, 'Show raw content')
            [CompletionResult]::new('--raw', '--raw', [CompletionResultType]::ParameterName, 'Show raw content')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;update' {
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'New content (use - for stdin)')
            [CompletionResult]::new('--content', '--content', [CompletionResultType]::ParameterName, 'New content (use - for stdin)')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Read content from file')
            [CompletionResult]::new('--file', '--file', [CompletionResultType]::ParameterName, 'Read content from file')
            [CompletionResult]::new('-a', '-a', [CompletionResultType]::ParameterName, 'Append to existing content')
            [CompletionResult]::new('--append', '--append', [CompletionResultType]::ParameterName, 'Append to existing content')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;complete' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;work' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;merge' {
            [CompletionResult]::new('-k', '-k', [CompletionResultType]::ParameterName, 'Keep branch after merge')
            [CompletionResult]::new('--keep-branch', '--keep-branch', [CompletionResultType]::ParameterName, 'Keep branch after merge')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;current' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;status' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;next' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;issue;help' {
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new issue')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all issues')
            [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterValue, 'Show issue details')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update an issue')
            [CompletionResult]::new('complete', 'complete', [CompletionResultType]::ParameterValue, 'Mark issue as complete')
            [CompletionResult]::new('work', 'work', [CompletionResultType]::ParameterValue, 'Start working on an issue')
            [CompletionResult]::new('merge', 'merge', [CompletionResultType]::ParameterValue, 'Merge completed issue')
            [CompletionResult]::new('current', 'current', [CompletionResultType]::ParameterValue, 'Show current issue')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Show project status')
            [CompletionResult]::new('next', 'next', [CompletionResultType]::ParameterValue, 'Show the next issue to work on')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;issue;help;create' {
            break
        }
        'swissarmyhammer;issue;help;list' {
            break
        }
        'swissarmyhammer;issue;help;show' {
            break
        }
        'swissarmyhammer;issue;help;update' {
            break
        }
        'swissarmyhammer;issue;help;complete' {
            break
        }
        'swissarmyhammer;issue;help;work' {
            break
        }
        'swissarmyhammer;issue;help;merge' {
            break
        }
        'swissarmyhammer;issue;help;current' {
            break
        }
        'swissarmyhammer;issue;help;status' {
            break
        }
        'swissarmyhammer;issue;help;next' {
            break
        }
        'swissarmyhammer;issue;help;help' {
            break
        }
        'swissarmyhammer;memo' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new memo')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all memos')
            [CompletionResult]::new('get', 'get', [CompletionResultType]::ParameterValue, 'Get a specific memo by ID')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update a memo''s content')
            [CompletionResult]::new('delete', 'delete', [CompletionResultType]::ParameterValue, 'Delete a memo')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search memos by content and title')
            [CompletionResult]::new('context', 'context', [CompletionResultType]::ParameterValue, 'Get all memos as context for AI')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;memo;create' {
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'Memo content (use - for stdin)')
            [CompletionResult]::new('--content', '--content', [CompletionResultType]::ParameterName, 'Memo content (use - for stdin)')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;list' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;get' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;update' {
            [CompletionResult]::new('-c', '-c', [CompletionResultType]::ParameterName, 'New content (use - for stdin)')
            [CompletionResult]::new('--content', '--content', [CompletionResultType]::ParameterName, 'New content (use - for stdin)')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;delete' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;search' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;context' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;memo;help' {
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new memo')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all memos')
            [CompletionResult]::new('get', 'get', [CompletionResultType]::ParameterValue, 'Get a specific memo by ID')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update a memo''s content')
            [CompletionResult]::new('delete', 'delete', [CompletionResultType]::ParameterValue, 'Delete a memo')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search memos by content and title')
            [CompletionResult]::new('context', 'context', [CompletionResultType]::ParameterValue, 'Get all memos as context for AI')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;memo;help;create' {
            break
        }
        'swissarmyhammer;memo;help;list' {
            break
        }
        'swissarmyhammer;memo;help;get' {
            break
        }
        'swissarmyhammer;memo;help;update' {
            break
        }
        'swissarmyhammer;memo;help;delete' {
            break
        }
        'swissarmyhammer;memo;help;search' {
            break
        }
        'swissarmyhammer;memo;help;context' {
            break
        }
        'swissarmyhammer;memo;help;help' {
            break
        }
        'swissarmyhammer;search' {
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help (see more with ''--help'')')
            [CompletionResult]::new('index', 'index', [CompletionResultType]::ParameterValue, 'Index files for semantic search')
            [CompletionResult]::new('query', 'query', [CompletionResultType]::ParameterValue, 'Query indexed files semantically')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;search;index' {
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Force re-indexing of all files')
            [CompletionResult]::new('--force', '--force', [CompletionResultType]::ParameterName, 'Force re-indexing of all files')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;search;query' {
            [CompletionResult]::new('-l', '-l', [CompletionResultType]::ParameterName, 'Number of results to return')
            [CompletionResult]::new('--limit', '--limit', [CompletionResultType]::ParameterName, 'Number of results to return')
            [CompletionResult]::new('-f', '-f', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('--format', '--format', [CompletionResultType]::ParameterName, 'Output format')
            [CompletionResult]::new('-h', '-h', [CompletionResultType]::ParameterName, 'Print help')
            [CompletionResult]::new('--help', '--help', [CompletionResultType]::ParameterName, 'Print help')
            break
        }
        'swissarmyhammer;search;help' {
            [CompletionResult]::new('index', 'index', [CompletionResultType]::ParameterValue, 'Index files for semantic search')
            [CompletionResult]::new('query', 'query', [CompletionResultType]::ParameterValue, 'Query indexed files semantically')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;search;help;index' {
            break
        }
        'swissarmyhammer;search;help;query' {
            break
        }
        'swissarmyhammer;search;help;help' {
            break
        }
        'swissarmyhammer;help' {
            [CompletionResult]::new('serve', 'serve', [CompletionResultType]::ParameterValue, 'Run as MCP server (default when invoked via stdio)')
            [CompletionResult]::new('doctor', 'doctor', [CompletionResultType]::ParameterValue, 'Diagnose configuration and setup issues')
            [CompletionResult]::new('prompt', 'prompt', [CompletionResultType]::ParameterValue, 'Manage and test prompts')
            [CompletionResult]::new('flow', 'flow', [CompletionResultType]::ParameterValue, 'Execute and manage workflows')
            [CompletionResult]::new('completion', 'completion', [CompletionResultType]::ParameterValue, 'Generate shell completion scripts')
            [CompletionResult]::new('validate', 'validate', [CompletionResultType]::ParameterValue, 'Validate prompt files and workflows for syntax and best practices')
            [CompletionResult]::new('issue', 'issue', [CompletionResultType]::ParameterValue, 'Issue management commands')
            [CompletionResult]::new('memo', 'memo', [CompletionResultType]::ParameterValue, 'Memoranda (memo) management commands')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Semantic search commands')
            [CompletionResult]::new('help', 'help', [CompletionResultType]::ParameterValue, 'Print this message or the help of the given subcommand(s)')
            break
        }
        'swissarmyhammer;help;serve' {
            break
        }
        'swissarmyhammer;help;doctor' {
            break
        }
        'swissarmyhammer;help;prompt' {
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all available prompts')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test prompts interactively with sample arguments')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search for prompts with advanced filtering and ranking')
            break
        }
        'swissarmyhammer;help;prompt;list' {
            break
        }
        'swissarmyhammer;help;prompt;test' {
            break
        }
        'swissarmyhammer;help;prompt;search' {
            break
        }
        'swissarmyhammer;help;flow' {
            [CompletionResult]::new('run', 'run', [CompletionResultType]::ParameterValue, 'Run a workflow')
            [CompletionResult]::new('resume', 'resume', [CompletionResultType]::ParameterValue, 'Resume a paused workflow run')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List available workflows')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Check status of a workflow run')
            [CompletionResult]::new('logs', 'logs', [CompletionResultType]::ParameterValue, 'View logs for a workflow run')
            [CompletionResult]::new('metrics', 'metrics', [CompletionResultType]::ParameterValue, 'View metrics for workflow runs')
            [CompletionResult]::new('visualize', 'visualize', [CompletionResultType]::ParameterValue, 'Generate execution visualization')
            [CompletionResult]::new('test', 'test', [CompletionResultType]::ParameterValue, 'Test a workflow without executing actions (simulates dry run)')
            break
        }
        'swissarmyhammer;help;flow;run' {
            break
        }
        'swissarmyhammer;help;flow;resume' {
            break
        }
        'swissarmyhammer;help;flow;list' {
            break
        }
        'swissarmyhammer;help;flow;status' {
            break
        }
        'swissarmyhammer;help;flow;logs' {
            break
        }
        'swissarmyhammer;help;flow;metrics' {
            break
        }
        'swissarmyhammer;help;flow;visualize' {
            break
        }
        'swissarmyhammer;help;flow;test' {
            break
        }
        'swissarmyhammer;help;completion' {
            break
        }
        'swissarmyhammer;help;validate' {
            break
        }
        'swissarmyhammer;help;issue' {
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new issue')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all issues')
            [CompletionResult]::new('show', 'show', [CompletionResultType]::ParameterValue, 'Show issue details')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update an issue')
            [CompletionResult]::new('complete', 'complete', [CompletionResultType]::ParameterValue, 'Mark issue as complete')
            [CompletionResult]::new('work', 'work', [CompletionResultType]::ParameterValue, 'Start working on an issue')
            [CompletionResult]::new('merge', 'merge', [CompletionResultType]::ParameterValue, 'Merge completed issue')
            [CompletionResult]::new('current', 'current', [CompletionResultType]::ParameterValue, 'Show current issue')
            [CompletionResult]::new('status', 'status', [CompletionResultType]::ParameterValue, 'Show project status')
            [CompletionResult]::new('next', 'next', [CompletionResultType]::ParameterValue, 'Show the next issue to work on')
            break
        }
        'swissarmyhammer;help;issue;create' {
            break
        }
        'swissarmyhammer;help;issue;list' {
            break
        }
        'swissarmyhammer;help;issue;show' {
            break
        }
        'swissarmyhammer;help;issue;update' {
            break
        }
        'swissarmyhammer;help;issue;complete' {
            break
        }
        'swissarmyhammer;help;issue;work' {
            break
        }
        'swissarmyhammer;help;issue;merge' {
            break
        }
        'swissarmyhammer;help;issue;current' {
            break
        }
        'swissarmyhammer;help;issue;status' {
            break
        }
        'swissarmyhammer;help;issue;next' {
            break
        }
        'swissarmyhammer;help;memo' {
            [CompletionResult]::new('create', 'create', [CompletionResultType]::ParameterValue, 'Create a new memo')
            [CompletionResult]::new('list', 'list', [CompletionResultType]::ParameterValue, 'List all memos')
            [CompletionResult]::new('get', 'get', [CompletionResultType]::ParameterValue, 'Get a specific memo by ID')
            [CompletionResult]::new('update', 'update', [CompletionResultType]::ParameterValue, 'Update a memo''s content')
            [CompletionResult]::new('delete', 'delete', [CompletionResultType]::ParameterValue, 'Delete a memo')
            [CompletionResult]::new('search', 'search', [CompletionResultType]::ParameterValue, 'Search memos by content and title')
            [CompletionResult]::new('context', 'context', [CompletionResultType]::ParameterValue, 'Get all memos as context for AI')
            break
        }
        'swissarmyhammer;help;memo;create' {
            break
        }
        'swissarmyhammer;help;memo;list' {
            break
        }
        'swissarmyhammer;help;memo;get' {
            break
        }
        'swissarmyhammer;help;memo;update' {
            break
        }
        'swissarmyhammer;help;memo;delete' {
            break
        }
        'swissarmyhammer;help;memo;search' {
            break
        }
        'swissarmyhammer;help;memo;context' {
            break
        }
        'swissarmyhammer;help;search' {
            [CompletionResult]::new('index', 'index', [CompletionResultType]::ParameterValue, 'Index files for semantic search')
            [CompletionResult]::new('query', 'query', [CompletionResultType]::ParameterValue, 'Query indexed files semantically')
            break
        }
        'swissarmyhammer;help;search;index' {
            break
        }
        'swissarmyhammer;help;search;query' {
            break
        }
        'swissarmyhammer;help;help' {
            break
        }
    })

    $completions.Where{ $_.CompletionText -like "$wordToComplete*" } |
        Sort-Object -Property ListItemText
}
test completions::tests::test_print_completion_function ... ok
test completions::tests::test_generate_completions_to_directory ... ok
test mcp_integration::tests::test_cli_tool_context_creation ... ok
test list::tests::test_builtin_prompts_should_be_identified_correctly ... ok
abort | Abort current execution
  A quick way to stop the world.

are_issues_complete | are_issues_complete
  Check if the plan is complete.

are_reviews_done | are_reviews_done
  Check if all the code review items are complete.

are_tests_passing | are_tests_passing
  Check if all tests are passing.

code | Code
  Partial template for reuse in other prompts

code.md | Code.md
  Partial template for reuse in other prompts

code/issue | do_issue
  Code up an issue

code/review | Do Code Review
  Code up the code review

coding_standards | Coding Standards
  Partial template for reuse in other prompts

coding_standards.md | Coding Standards.md
  Partial template for reuse in other prompts

commit | Commit
  Commit your work to git.

coverage | coverage
  Improve coverage.

debug/error | Debug Error Messages
  Analyze error messages and provide debugging guidance with potential solutions

debug/logs | Analyze Log Files
  Analyze log files to identify issues and patterns

docs/comments | Generate Code Comments
  Add comprehensive comments and documentation to code

docs/readme | Generate README Documentation
  Create comprehensive README documentation for a project

abort | Abort current execution
  A quick way to stop the world.

test prompt::tests::test_run_prompt_command_test_with_invalid_prompt ... abort | Abort current execution
  A quick way to stop the world.

are_issues_complete | are_issues_complete
  Check if the plan is complete.

are_reviews_done | are_reviews_done
  Check if all the code review items are complete.

code.md | Code.md
  Partial template for reuse in other prompts

are_tests_passing | are_tests_passing
coding_standards.md | Coding Standards.md
  Partial template for reuse in other prompts

documentation.md | Documentation.md
ok  Partial template for reuse in other prompts

empty.md | Empty.md
  Partial template for reuse in other prompts

example | Example Prompt
issue/code | issue_code
  Code up an issue

issue/on_worktree.md | Issue/on Worktree.md

  Partial template for reuse in other prompts

  An example prompt for testing

say-hello | Say Hello
  A simple greeting prompt that can be customized with name and language

  Check if all tests are passing.
document | document
  Create documentation for the project

documentation | Documentation
  Partial template for reuse in other prompts

principals.md | Principals.md
  Partial template for reuse in other prompts

documentation.md | Documentation.md
  Partial template for reuse in other prompts

review_format.md | Review Format.md
  Partial template for reuse in other prompts


code | Code
  Partial template for reuse in other prompts

code.md | Code.md
  Partial template for reuse in other prompts

code/issue | do_issue
  Code up an issue
empty | Empty
  Partial template for reuse in other prompts

empty.md | Empty.md
  Partial template for reuse in other prompts

example | Example Prompt
  An example prompt for testing

help | Help Assistant
  A prompt for providing helpful assistance and guidance to users


code/review | Do Code Review
todo.md | Todo.md
  Partial template for reuse in other prompts

  Code up the code review

coding_standards | Coding Standards
  Partial template for reuse in other prompts

coding_standards.md | Coding Standards.md
  Partial template for reuse in other prompts

commit | Commit
  Commit your work to git.

coverage | coverage
  Improve coverage.

debug/error | Debug Error Messages
  Analyze error messages and provide debugging guidance with potential solutions

debug/logs | Analyze Log Files
  Analyze log files to identify issues and patterns

docs/comments | Generate Code Comments
  Add comprehensive comments and documentation to code

docs/readme | Generate README Documentation
  Create comprehensive README documentation for a project

document | document
  Create documentation for the project

documentation | Documentation
  Partial template for reuse in other prompts

documentation.md | Documentation.md
  Partial template for reuse in other prompts

empty | Empty
  Partial template for reuse in other prompts
test signal_handler::tests::test_signal_handler_setup ... ok
issue/branch | issue_branch
  Create an issue work branch for the next issue to work

issue/code | issue_code
  Code up an issue

issue/complete | Issue Complete
  Mark an issue as complete

issue/on_worktree.md | Issue/on Worktree.md
  Partial template for reuse in other prompts

merge | merge
  Merge your work into the main branch.

plan | plan
  Generate a step by step development plan from a specification.

principals | Principals
  Partial template for reuse in other prompts

principals.md | Principals.md
  Partial template for reuse in other prompts

prompts/create | Create New Prompt
  Help create effective prompts for swissarmyhammer

prompts/improve | Improve Existing Prompt
  Analyze and enhance existing prompts for better effectiveness

review/accessibility | Accessibility Review
  Review code for accessibility compliance and best practices

review/branch | review code
  Improved the current code changes

review/code | Code Review
  Review code for quality, bugs, and improvements

test list::tests::test_list_command_with_search ... 
empty.md | Empty.md
  Partial template for reuse in other prompts

example | Example Prompt
  An example prompt for testing

help | Help Assistant
  A prompt for providing helpful assistance and guidance to users

issue/branch | issue_branch
  Create an issue work branch for the next issue to work

issue/code | issue_code
  Code up an issue

issue/complete | Issue Complete
  Mark an issue as complete

issue/on_worktree.md | Issue/on Worktree.md
  Partial template for reuse in other prompts

merge | merge
  Merge your work into the main branch.

plan | plan
  Generate a step by step development plan from a specification.

ok
principals | Principals
  Partial template for reuse in other prompts

review/documentation | review documentation
  Improved the documentation for the project

review/patterns | Pattern Code Review
  Perform a comprehensive review of the code to improve pattern use.

review/security | Security Code Review
  Perform a comprehensive security review of code to identify vulnerabilities

principals.md | Principals.md
  Partial template for reuse in other prompts

prompts/create | Create New Prompt
  Help create effective prompts for swissarmyhammer

prompts/improve | Improve Existing Prompt
  Analyze and enhance existing prompts for better effectiveness

review/accessibility | Accessibility Review
  Review code for accessibility compliance and best practices

review/branch | review code
  Improved the current code changes

review/code | Code Review
  Review code for quality, bugs, and improvements

review/documentation | review documentation
  Improved the documentation for the project

review/patterns | Pattern Code Review
  Perform a comprehensive review of the code to improve pattern use.

review/security | Security Code Review
  Perform a comprehensive security review of code to identify vulnerabilities

review_format | Review Format
  Partial template for reuse in other prompts

review_format.md | Review Format.md
  Partial template for reuse in other prompts

say-hello | Say Hello
  A simple greeting prompt that can be customized with name and language

review_format | Review Format
  Partial template for reuse in other prompts

review_format.md | Review Format.md
  Partial template for reuse in other prompts

say-hello | Say Hello
  A simple greeting prompt that can be customized with name and language

test | test
  Iterate to correct test failures in the codebase.

todo | Todo
  Partial template for reuse in other prompts

todo.md | Todo.md
  Partial template for reuse in other prompts

test | test
  Iterate to correct test failures in the codebase.

todo | Todo
  Partial template for reuse in other prompts

todo.md | Todo.md
  Partial template for reuse in other prompts

test signal_handler::tests::test_signal_handler_does_not_block ... ok
test list::tests::test_list_command_source_filter ... ok
test mcp_integration::tests::test_rate_limiter_integration ... ok
test prompt::tests::test_run_prompt_command_list ... ok
test list::tests::test_list_command_with_no_prompts ... ok
test test::tests::test_parse_arguments ... ok
test test::tests::test_parse_arguments_invalid_format ... ok
test test::tests::test_parse_arguments_with_set_variables ... ok
test test::tests::test_runner_creation ... ok
test validate::tests::test_partial_template_no_variable_validation_errors ... ok
test list::tests::test_list_command_json_format ... ok
test validate::tests::test_quiet_mode_hides_warnings_from_summary ... ok
test list::tests::test_list_command_yaml_format ... ok
test validate::tests::test_validate_command_includes_workflows ... ok
test signal_handler::tests::test_ctrl_c_signal_setup ... ok
test validate::tests::test_validate_workflow_empty_file ... ok
test validate::tests::test_validate_workflow_complex_edge_cases ... ok
test validate::tests::test_validate_workflow_advanced_validation_removed ... ok
test validate::tests::test_validate_workflow_circular_dependency_structurally_valid ... ok
test validate::tests::test_validate_workflow_empty_name ... ok
test validate::tests::test_validate_workflow_name_allowed_special_chars ... ok
test validate::tests::test_validate_workflow_missing_terminal_state ... ok
test validate::tests::test_validate_workflow_security_handled_by_parsers ... ok
test validate::tests::test_validate_workflow_nested_conditions ... ok
test validate::tests::test_validate_workflow_self_loop ... ok
test test::tests::test_get_prompt_validation ... ok
test validate::tests::test_validate_workflow_syntax_invalid ... ok
test validate::tests::test_validate_all_workflows_uses_standard_locations ... ok
test validate::tests::test_validate_workflow_syntax_valid ... ok
test signal_handler::tests::test_unix_terminate_signal_setup ... ok
test validate::tests::test_validation_result_add_error ... ok
test validate::tests::test_validation_result_add_warning ... ok
test validate::tests::test_validation_result_creation ... ok
test validate::tests::test_validator_creation ... ok
test validate::tests::test_validate_all_workflows_integration ... ok
test validate::tests::test_validate_workflow_unreachable_states ... ok
test validate::tests::test_validate_workflow_malformed_mermaid ... ok
test validate::tests::test_validate_workflow_variable_detection_removed ... ok
test validate::tests::test_validate_workflow_with_actions ... ok
test validate::tests::test_validate_command_loads_same_workflows_as_flow_list ... ok
test validate::tests::test_validate_only_loads_from_standard_locations ... ok
test prompt::tests::test_run_prompt_command_search ... ok
test signal_handler::tests::test_multiple_signal_handler_setup ... ok
test flow::tests::test_execute_workflow_test_mode_timeout ... ok
test signal_handler::tests::test_signal_handler_behavior ... ok
test search::tests::test_run_semantic_index_single_pattern ... ok
test search::tests::test_run_semantic_index_multiple_patterns ... ok
test doctor::checks::tests::test_claude_path_detection ... ok
test doctor::tests::test_run_diagnostics ... ok
test doctor::tests::test_workflow_diagnostics_in_run_diagnostics ... ok
test validate::tests::test_validate_all_handles_partial_templates ... ok

test result: ok. 149 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 2.07s

     Running tests/behavioral_consistency_tests.rs (target/debug/deps/behavioral_consistency_tests-513eb9cd5a859cc0)

running 15 tests
test test_help_output_consistency ... ok
test test_issue_create_output_consistency ... ok
test test_issue_list_output_format_consistency ... ok
test test_issue_list_json_format_consistency ... ok
test test_memo_create_output_consistency ... ok
test test_output_stability_with_scale ... ok
test test_quiet_flag_consistency ... ok
test test_verbose_flag_consistency ... ok
test test_error_message_consistency ... ok
test test_memo_list_output_consistency ... ok
test test_edge_case_data_handling ... ok
test test_subcommand_help_consistency ... ok
test test_exit_codes_consistency ... ok
test test_search_index_output_consistency has been running for over 60 seconds
test test_search_query_output_consistency has been running for over 60 seconds
test test_search_index_output_consistency ... ok
test test_search_query_output_consistency ... ok

test result: ok. 15 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 99.72s

     Running tests/binary_aliases_test.rs (target/debug/deps/binary_aliases_test-ba232e09448e53d2)

running 4 tests
test test_swissarmyhammer_binary_exists ... ok
test test_both_binaries_same_version ... ok
test test_sah_binary_exists ... ok
test test_both_binaries_have_same_commands ... ok

test result: ok. 4 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 2.53s

     Running tests/cli_integration_test.rs (target/debug/deps/cli_integration_test-c0e3ebe127b5e7a3)

running 49 tests
test test_doctor_command ... ignored, doctor command may fail in CI due to environment differences
test test_flow_test_interactive_mode ... ignored, interactive mode requires user input
test test_flow_test_custom_workflow_dir ... ok
test test_flow_test_help ... ok
test test_prompt_subcommand_list ... ok
test test_error_exit_codes ... ok
test test_prompt_help ... ok
test test_flow_test_invalid_set_format ... ok
test test_flow_test_simple_workflow ... ok
test test_flow_test_with_set_variables ... ok
test test_prompt_subcommand_search ... ok
test test_flow_test_nonexistent_workflow ... ok
test test_flow_test_empty_set_value ... ok
test test_flow_test_coverage_complete ... ok
test test_flow_test_with_timeout ... ok
test test_flow_test_quiet_mode ... ok
test test_flow_test_special_chars_in_set ... ok
test test_prompt_subcommand_validate ... ok
test test_prompt_subcommand_test ... ok
test test_root_validate_help ... ok
test test_root_validate_invalid_format ... ok
test test_quiet_flag ... ok
test test_root_help_includes_validate ... ok
test test_root_validate_invalid_yaml ... ok
test test_root_validate_stress_many_files ... ignored, stress test - only run manually
test test_concurrent_commands ... ok
test test_prompt_list_formats ... ok
test test_completion_command ... ok
test test_issue_create_with_optional_names ... ok
test test_concurrent_flow_test ... ok
